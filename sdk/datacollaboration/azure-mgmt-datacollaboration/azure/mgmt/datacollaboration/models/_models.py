# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class ProxyDto(Model):
    """Base data transfer object implementation for proxy resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProxyDto, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class DataSet(ProxyDto):
    """A set of data from external storage.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ADLSGen2FileDataSet, ADLSGen2FileSystemDataSet,
    ADLSGen2FolderDataSet, BlobContainerDataSet, BlobDataSet, BlobFolderDataSet

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AdlsGen2File': 'ADLSGen2FileDataSet', 'AdlsGen2FileSystem': 'ADLSGen2FileSystemDataSet', 'AdlsGen2Folder': 'ADLSGen2FolderDataSet', 'Container': 'BlobContainerDataSet', 'Blob': 'BlobDataSet', 'BlobFolder': 'BlobFolderDataSet'}
    }

    def __init__(self, **kwargs):
        super(DataSet, self).__init__(**kwargs)
        self.kind = None
        self.kind = 'DataSet'


class ADLSGen2FileDataSet(DataSet):
    """An ADLS Gen 2 file data set.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar data_set_id: Unique id for identifying a data set resource
    :vartype data_set_id: str
    :param file_path: Required. File path within the file system.
    :type file_path: str
    :param file_system: Required. File system to which the file belongs.
    :type file_system: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'data_set_id': {'readonly': True},
        'file_path': {'required': True},
        'file_system': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_path': {'key': 'properties.filePath', 'type': 'str'},
        'file_system': {'key': 'properties.fileSystem', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ADLSGen2FileDataSet, self).__init__(**kwargs)
        self.data_set_id = None
        self.file_path = kwargs.get('file_path', None)
        self.file_system = kwargs.get('file_system', None)
        self.storage_account_id = kwargs.get('storage_account_id', None)
        self.kind = 'AdlsGen2File'


class ADLSGen2FileSystemDataSet(DataSet):
    """An ADLS Gen 2 file system data set.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar data_set_id: Unique id for identifying a data set resource
    :vartype data_set_id: str
    :param file_system: Required. The file system name.
    :type file_system: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'data_set_id': {'readonly': True},
        'file_system': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_system': {'key': 'properties.fileSystem', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ADLSGen2FileSystemDataSet, self).__init__(**kwargs)
        self.data_set_id = None
        self.file_system = kwargs.get('file_system', None)
        self.storage_account_id = kwargs.get('storage_account_id', None)
        self.kind = 'AdlsGen2FileSystem'


class ADLSGen2FolderDataSet(DataSet):
    """An ADLS Gen 2 folder data set.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar data_set_id: Unique id for identifying a data set resource
    :vartype data_set_id: str
    :param file_system: Required. File system to which the folder belongs.
    :type file_system: str
    :param folder_path: Required. Folder path within the file system.
    :type folder_path: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'data_set_id': {'readonly': True},
        'file_system': {'required': True},
        'folder_path': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_system': {'key': 'properties.fileSystem', 'type': 'str'},
        'folder_path': {'key': 'properties.folderPath', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ADLSGen2FolderDataSet, self).__init__(**kwargs)
        self.data_set_id = None
        self.file_system = kwargs.get('file_system', None)
        self.folder_path = kwargs.get('folder_path', None)
        self.storage_account_id = kwargs.get('storage_account_id', None)
        self.kind = 'AdlsGen2Folder'


class BlobContainerDataSet(DataSet):
    """An Azure storage blob container data set.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param container_name: Required. BLOB Container name.
    :type container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource
    :vartype data_set_id: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'container_name': {'required': True},
        'data_set_id': {'readonly': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'container_name': {'key': 'properties.containerName', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(BlobContainerDataSet, self).__init__(**kwargs)
        self.container_name = kwargs.get('container_name', None)
        self.data_set_id = None
        self.storage_account_id = kwargs.get('storage_account_id', None)
        self.kind = 'Container'


class BlobDataSet(DataSet):
    """An Azure storage blob data set.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param container_name: Required. Container that has the file path.
    :type container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource
    :vartype data_set_id: str
    :param file_path: Required. File path within the source data source
    :type file_path: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'container_name': {'required': True},
        'data_set_id': {'readonly': True},
        'file_path': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'container_name': {'key': 'properties.containerName', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_path': {'key': 'properties.filePath', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(BlobDataSet, self).__init__(**kwargs)
        self.container_name = kwargs.get('container_name', None)
        self.data_set_id = None
        self.file_path = kwargs.get('file_path', None)
        self.storage_account_id = kwargs.get('storage_account_id', None)
        self.kind = 'Blob'


class BlobFolderDataSet(DataSet):
    """An Azure storage blob folder data set.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param container_name: Required. Container that has the file path.
    :type container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource
    :vartype data_set_id: str
    :param prefix: Required. Prefix for blob folder
    :type prefix: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'container_name': {'required': True},
        'data_set_id': {'readonly': True},
        'prefix': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'container_name': {'key': 'properties.containerName', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'prefix': {'key': 'properties.prefix', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(BlobFolderDataSet, self).__init__(**kwargs)
        self.container_name = kwargs.get('container_name', None)
        self.data_set_id = None
        self.prefix = kwargs.get('prefix', None)
        self.storage_account_id = kwargs.get('storage_account_id', None)
        self.kind = 'BlobFolder'


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Constraint(ProxyDto):
    """Constraint for entitlement, restricts the access granted by it.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: LocationConstraint, ScriptConstraint

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param system_data: SystemData Info of script
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Location': 'LocationConstraint', 'Script': 'ScriptConstraint'}
    }

    def __init__(self, **kwargs):
        super(Constraint, self).__init__(**kwargs)
        self.system_data = kwargs.get('system_data', None)
        self.kind = None
        self.kind = 'Constraint'


class ConsumerInvitation(ProxyDto):
    """A consumer Invitation data transfer object.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar location: Invitation location
    :vartype location: str
    :ivar description: Description shared when the invitation was created
    :vartype description: str
    :param invitation_id: Required. Unique id of the invitation.
    :type invitation_id: str
    :ivar invitation_status: The status of the invitation. Possible values
     include: 'Pending', 'Rejected', 'Accepted'
    :vartype invitation_status: str or
     ~azure.mgmt.datacollaboration.models.InvitationStatus
    :ivar proposal_name: Gets the source proposal Name.
    :vartype proposal_name: str
    :ivar provider_email: Email of the provider who created the resource
    :vartype provider_email: str
    :ivar provider_name: Name of the provider who created the resource
    :vartype provider_name: str
    :ivar provider_tenant_name: Tenant name of the provider who created the
     resource
    :vartype provider_tenant_name: str
    :ivar responded_at: The time the recipient responded to the invitation.
    :vartype responded_at: datetime
    :ivar sent_at: Gets the time at which the invitation was sent.
    :vartype sent_at: datetime
    :ivar terms_of_use: Terms of use proposal when the invitation was created
    :vartype terms_of_use: str
    :ivar user_email: Email of the user who created the resource
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource
    :vartype user_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'description': {'readonly': True},
        'invitation_id': {'required': True},
        'invitation_status': {'readonly': True},
        'proposal_name': {'readonly': True},
        'provider_email': {'readonly': True},
        'provider_name': {'readonly': True},
        'provider_tenant_name': {'readonly': True},
        'responded_at': {'readonly': True},
        'sent_at': {'readonly': True},
        'terms_of_use': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'invitation_id': {'key': 'properties.invitationId', 'type': 'str'},
        'invitation_status': {'key': 'properties.invitationStatus', 'type': 'str'},
        'proposal_name': {'key': 'properties.proposalName', 'type': 'str'},
        'provider_email': {'key': 'properties.providerEmail', 'type': 'str'},
        'provider_name': {'key': 'properties.providerName', 'type': 'str'},
        'provider_tenant_name': {'key': 'properties.providerTenantName', 'type': 'str'},
        'responded_at': {'key': 'properties.respondedAt', 'type': 'iso-8601'},
        'sent_at': {'key': 'properties.sentAt', 'type': 'iso-8601'},
        'terms_of_use': {'key': 'properties.termsOfUse', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ConsumerInvitation, self).__init__(**kwargs)
        self.location = None
        self.description = None
        self.invitation_id = kwargs.get('invitation_id', None)
        self.invitation_status = None
        self.proposal_name = None
        self.provider_email = None
        self.provider_name = None
        self.provider_tenant_name = None
        self.responded_at = None
        self.sent_at = None
        self.terms_of_use = None
        self.user_email = None
        self.user_name = None


class DataAsset(ProxyDto):
    """Data asset that can be referenced from a proposal.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar data_asset_id: Unique id for identifying a data asset resource
    :vartype data_asset_id: str
    :param data_processing_strategy: Data processing strategy to use for the
     the child DataSets. Possible values include: 'CopyBased', 'InPlace'
    :type data_processing_strategy: str or
     ~azure.mgmt.datacollaboration.models.DataProcessingStrategy
    :param description: General Description of the DataSet content
    :type description: str
    :ivar provisioning_state: Provisioning state of the DataAsset. Possible
     values include: 'Succeeded', 'Creating', 'Updating', 'Deleting', 'Moving',
     'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.datacollaboration.models.ProvisioningState
    :param system_data: SystemData Info of dataAsset
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'data_asset_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_asset_id': {'key': 'properties.dataAssetId', 'type': 'str'},
        'data_processing_strategy': {'key': 'properties.dataProcessingStrategy', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs):
        super(DataAsset, self).__init__(**kwargs)
        self.data_asset_id = None
        self.data_processing_strategy = kwargs.get('data_processing_strategy', None)
        self.description = kwargs.get('description', None)
        self.provisioning_state = None
        self.system_data = kwargs.get('system_data', None)


class DataAssetReference(ProxyDto):
    """Reference to a data asset.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param data_asset_id: Required. The unique identifier of the referenced
     data asset
    :type data_asset_id: str
    :ivar data_asset_reference_id: Unique id for identifying a dataset
     reference resource
    :vartype data_asset_reference_id: str
    :param description: General Description of the data asset reference
    :type description: str
    :ivar owner_id: The participant id of the data asset owner
    :vartype owner_id: str
    :param system_data: SystemData Info of dataAssetReference
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'data_asset_id': {'required': True},
        'data_asset_reference_id': {'readonly': True},
        'owner_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_asset_id': {'key': 'properties.dataAssetId', 'type': 'str'},
        'data_asset_reference_id': {'key': 'properties.dataAssetReferenceId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'owner_id': {'key': 'properties.ownerId', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs):
        super(DataAssetReference, self).__init__(**kwargs)
        self.data_asset_id = kwargs.get('data_asset_id', None)
        self.data_asset_reference_id = None
        self.description = kwargs.get('description', None)
        self.owner_id = None
        self.system_data = kwargs.get('system_data', None)


class ResourceReference(Model):
    """A set of data from external storage.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DataAssetReferenceResourceReference,
    DataAssetResourceReference, ScriptReferenceResourceReference,
    ScriptResourceReference

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Id of the azure resource
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource
    :vartype system_data:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceReferenceSystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'DataAssetReference': 'DataAssetReferenceResourceReference', 'DataAsset': 'DataAssetResourceReference', 'ScriptReference': 'ScriptReferenceResourceReference', 'Script': 'ScriptResourceReference'}
    }

    def __init__(self, **kwargs):
        super(ResourceReference, self).__init__(**kwargs)
        self.resource_id = None
        self.resource_name = None
        self.resource_type = None
        self.system_data = None
        self.kind = None


class DataAssetReferenceResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within
    the specified Azure dataAssetReference.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Id of the azure resource
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource
    :vartype system_data:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar data_asset_reference_id: The unique identifier of the referenced
     data asset
    :vartype data_asset_reference_id: str
    :ivar description: General Description of the data asset reference
    :vartype description: str
    """

    _validation = {
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'required': True},
        'data_asset_reference_id': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceReferenceSystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_asset_reference_id': {'key': 'properties.dataAssetReferenceId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataAssetReferenceResourceReference, self).__init__(**kwargs)
        self.data_asset_reference_id = None
        self.description = None
        self.kind = 'DataAssetReference'


class DataAssetResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within
    the specified Azure dataAsset.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Id of the azure resource
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource
    :vartype system_data:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar data_asset_id: The unique identifier of the referenced data asset
    :vartype data_asset_id: str
    :ivar description: General Description of the data asset reference
    :vartype description: str
    """

    _validation = {
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'required': True},
        'data_asset_id': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceReferenceSystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_asset_id': {'key': 'properties.dataAssetId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataAssetResourceReference, self).__init__(**kwargs)
        self.data_asset_id = None
        self.description = None
        self.kind = 'DataAsset'


class DataCollaborationError(Model):
    """The data collaboration error model.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The data share error body
    :type error:
     ~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'DataCollaborationErrorInfo'},
    }

    def __init__(self, **kwargs):
        super(DataCollaborationError, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class DataCollaborationErrorException(HttpOperationError):
    """Server responsed with exception of type: 'DataCollaborationError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(DataCollaborationErrorException, self).__init__(deserialize, response, 'DataCollaborationError', *args)


class DataCollaborationErrorInfo(Model):
    """The data collaboration error body model.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Code of the error
    :type code: str
    :param details: Nested details of the error model
    :type details:
     list[~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo]
    :param message: Required. Message of the error
    :type message: str
    :param target: Target of the error
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'details': {'key': 'details', 'type': '[DataCollaborationErrorInfo]'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataCollaborationErrorInfo, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.details = kwargs.get('details', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)


class DefaultDto(Model):
    """Base data transfer object implementation for default resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :param location: Location of the azure resource.
    :type location: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :param tags: Tags on the azure resource.
    :type tags: dict[str, str]
    :ivar type: Type of the azure resource
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DefaultDto, self).__init__(**kwargs)
        self.id = None
        self.location = kwargs.get('location', None)
        self.name = None
        self.tags = kwargs.get('tags', None)
        self.type = None


class Policy(ProxyDto):
    """Policy for entitlement.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DiagnosticPolicy

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param system_data: SystemData Info of policy
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'DiagnosticLevel': 'DiagnosticPolicy'}
    }

    def __init__(self, **kwargs):
        super(Policy, self).__init__(**kwargs)
        self.system_data = kwargs.get('system_data', None)
        self.kind = None
        self.kind = 'Policy'


class DiagnosticPolicy(Policy):
    """A diagnostic policy.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param system_data: SystemData Info of policy
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param description: Description of the policy
    :type description: str
    :param log_level: Required. The policy log level. Possible values include:
     'Verbose', 'Information', 'Warning', 'Error', 'Critical'
    :type log_level: str or ~azure.mgmt.datacollaboration.models.LogLevel
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'log_level': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'log_level': {'key': 'properties.logLevel', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DiagnosticPolicy, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.log_level = kwargs.get('log_level', None)
        self.kind = 'DiagnosticLevel'


class DimensionProperties(Model):
    """properties for dimension.

    :param display_name: localized display name of the dimension to customer
    :type display_name: str
    :param name: dimension name
    :type name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DimensionProperties, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.name = kwargs.get('name', None)


class Entitlement(ProxyDto):
    """Grants access to another shared resource in the same proposal, with
    optional constraints and policies.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param description: Textual description of the entitlement
    :type description: str
    :param resource_id: Required. The unique identifier of the resource of the
     entitlement.
     Must be a reference resource from the same proposal.
    :type resource_id: str
    :param resource_type: Required. The type of resourced used by the
     entitlement. Possible values include: 'DataAssetReference',
     'ScriptReference'
    :type resource_type: str or
     ~azure.mgmt.datacollaboration.models.ResourceType
    :param subject_id: Required. The unique identifier of the subject of the
     entitlement.
     The subject must be a participant in the same proposal.
    :type subject_id: str
    :param system_data: SystemData Info of dataAssetReference
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'resource_id': {'required': True},
        'resource_type': {'required': True},
        'subject_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
        'resource_type': {'key': 'properties.resourceType', 'type': 'str'},
        'subject_id': {'key': 'properties.subjectId', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs):
        super(Entitlement, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_type = kwargs.get('resource_type', None)
        self.subject_id = kwargs.get('subject_id', None)
        self.system_data = kwargs.get('system_data', None)


class Identity(Model):
    """Identity of resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar principal_id: service principal Id
    :vartype principal_id: str
    :ivar tenant_id: Tenant Id
    :vartype tenant_id: str
    :param type: Identity Type. Possible values include: 'SystemAssigned'
    :type type: str or ~azure.mgmt.datacollaboration.models.Type
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Identity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = kwargs.get('type', None)


class Invitation(ProxyDto):
    """Invitation to participate in a shared proposal.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar invitation_id: unique invitation id
    :vartype invitation_id: str
    :ivar invitation_status: The status of the invitation. Possible values
     include: 'Pending', 'Rejected', 'Accepted'
    :vartype invitation_status: str or
     ~azure.mgmt.datacollaboration.models.InvitationStatus
    :ivar responded_at: The time the recipient responded to the invitation.
    :vartype responded_at: datetime
    :ivar sent_at: Gets the time at which the invitation was sent.
    :vartype sent_at: datetime
    :param target_active_directory_id: The target Azure AD Id. Can't be
     combined with email.
    :type target_active_directory_id: str
    :param target_email: The email the invitation is directed to.
    :type target_email: str
    :param target_object_id: The target user or application Id that invitation
     is being sent to.
     Must be specified along TargetActiveDirectoryId. This enables sending
     invitations to specific users or applications in an AD tenant.
    :type target_object_id: str
    :ivar user_email: Email of the user who created the resource
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource
    :vartype user_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'invitation_id': {'readonly': True},
        'invitation_status': {'readonly': True},
        'responded_at': {'readonly': True},
        'sent_at': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'invitation_id': {'key': 'properties.invitationId', 'type': 'str'},
        'invitation_status': {'key': 'properties.invitationStatus', 'type': 'str'},
        'responded_at': {'key': 'properties.respondedAt', 'type': 'iso-8601'},
        'sent_at': {'key': 'properties.sentAt', 'type': 'iso-8601'},
        'target_active_directory_id': {'key': 'properties.targetActiveDirectoryId', 'type': 'str'},
        'target_email': {'key': 'properties.targetEmail', 'type': 'str'},
        'target_object_id': {'key': 'properties.targetObjectId', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Invitation, self).__init__(**kwargs)
        self.invitation_id = None
        self.invitation_status = None
        self.responded_at = None
        self.sent_at = None
        self.target_active_directory_id = kwargs.get('target_active_directory_id', None)
        self.target_email = kwargs.get('target_email', None)
        self.target_object_id = kwargs.get('target_object_id', None)
        self.user_email = None
        self.user_name = None


class LocationConstraint(Constraint):
    """Constraint used to only allow access if the resource is used within the
    specified Azure location.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param system_data: SystemData Info of script
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param description: Description of the constraint.
    :type description: str
    :param location: Required. Location of the Azure resource (e.g. West US 2)
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'location': {'key': 'properties.location', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(LocationConstraint, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.location = kwargs.get('location', None)
        self.kind = 'Location'


class OperationMetaLogSpecification(Model):
    """log specifications for operation api.

    :param blob_duration: blob duration of the log
    :type blob_duration: str
    :param display_name: localized name of the log category
    :type display_name: str
    :param name: name of the log category
    :type name: str
    """

    _attribute_map = {
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationMetaLogSpecification, self).__init__(**kwargs)
        self.blob_duration = kwargs.get('blob_duration', None)
        self.display_name = kwargs.get('display_name', None)
        self.name = kwargs.get('name', None)


class OperationMetaMetricSpecification(Model):
    """metric specifications for the operation.

    :param aggregation_type: aggregation type of metric
    :type aggregation_type: str
    :param dimensions: properties for dimension
    :type dimensions:
     list[~azure.mgmt.datacollaboration.models.DimensionProperties]
    :param display_description: description of the metric
    :type display_description: str
    :param display_name: localized name of the metric
    :type display_name: str
    :param enable_regional_mdm_account: enable regional mdm account
    :type enable_regional_mdm_account: str
    :param internal_metric_name: internal metric name
    :type internal_metric_name: str
    :param name: name of the metric
    :type name: str
    :param resource_id_dimension_name_override: dimension name use to replace
     resource id if specified
    :type resource_id_dimension_name_override: str
    :param supported_aggregation_types: supported aggregation types
    :type supported_aggregation_types: list[str]
    :param supported_time_grain_types: supported time grain types
    :type supported_time_grain_types: list[str]
    :param unit: units for the metric
    :type unit: str
    """

    _attribute_map = {
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[DimensionProperties]'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enable_regional_mdm_account': {'key': 'enableRegionalMdmAccount', 'type': 'str'},
        'internal_metric_name': {'key': 'internalMetricName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'resource_id_dimension_name_override': {'key': 'resourceIdDimensionNameOverride', 'type': 'str'},
        'supported_aggregation_types': {'key': 'supportedAggregationTypes', 'type': '[str]'},
        'supported_time_grain_types': {'key': 'supportedTimeGrainTypes', 'type': '[str]'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationMetaMetricSpecification, self).__init__(**kwargs)
        self.aggregation_type = kwargs.get('aggregation_type', None)
        self.dimensions = kwargs.get('dimensions', None)
        self.display_description = kwargs.get('display_description', None)
        self.display_name = kwargs.get('display_name', None)
        self.enable_regional_mdm_account = kwargs.get('enable_regional_mdm_account', None)
        self.internal_metric_name = kwargs.get('internal_metric_name', None)
        self.name = kwargs.get('name', None)
        self.resource_id_dimension_name_override = kwargs.get('resource_id_dimension_name_override', None)
        self.supported_aggregation_types = kwargs.get('supported_aggregation_types', None)
        self.supported_time_grain_types = kwargs.get('supported_time_grain_types', None)
        self.unit = kwargs.get('unit', None)


class OperationMetaServiceSpecification(Model):
    """The operation meta service specification.

    :param log_specifications: log specifications for the operation
    :type log_specifications:
     list[~azure.mgmt.datacollaboration.models.OperationMetaLogSpecification]
    :param metric_specifications: metric specifications for the operation
    :type metric_specifications:
     list[~azure.mgmt.datacollaboration.models.OperationMetaMetricSpecification]
    """

    _attribute_map = {
        'log_specifications': {'key': 'logSpecifications', 'type': '[OperationMetaLogSpecification]'},
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[OperationMetaMetricSpecification]'},
    }

    def __init__(self, **kwargs):
        super(OperationMetaServiceSpecification, self).__init__(**kwargs)
        self.log_specifications = kwargs.get('log_specifications', None)
        self.metric_specifications = kwargs.get('metric_specifications', None)


class OperationModel(Model):
    """The response model for get operations.

    :param display: Properties on the operation
    :type display:
     ~azure.mgmt.datacollaboration.models.OperationModelProperties
    :param name: Operation name for display purposes
    :type name: str
    :param origin: origin of the operation
    :type origin: str
    :param service_specification: meta service specification
    :type service_specification:
     ~azure.mgmt.datacollaboration.models.OperationMetaServiceSpecification
    """

    _attribute_map = {
        'display': {'key': 'display', 'type': 'OperationModelProperties'},
        'name': {'key': 'name', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
        'service_specification': {'key': 'properties.serviceSpecification', 'type': 'OperationMetaServiceSpecification'},
    }

    def __init__(self, **kwargs):
        super(OperationModel, self).__init__(**kwargs)
        self.display = kwargs.get('display', None)
        self.name = kwargs.get('name', None)
        self.origin = kwargs.get('origin', None)
        self.service_specification = kwargs.get('service_specification', None)


class OperationModelProperties(Model):
    """Properties on operations.

    :param description: Description of the operation for display purposes
    :type description: str
    :param operation: Name of the operation for display purposes
    :type operation: str
    :param provider: Name of the provider for display purposes
    :type provider: str
    :param resource: Name of the resource type for display purposes
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationModelProperties, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.operation = kwargs.get('operation', None)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)


class OperationResponse(Model):
    """Response for long running operation.

    All required parameters must be populated in order to send to Azure.

    :param end_time: start time
    :type end_time: datetime
    :param error: The error property when status is failed.
    :type error:
     ~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo
    :param start_time: start time
    :type start_time: datetime
    :param status: Required. Operation state of the long running operation.
     Possible values include: 'Accepted', 'InProgress', 'TransientFailure',
     'Succeeded', 'Failed', 'Canceled'
    :type status: str or ~azure.mgmt.datacollaboration.models.Status
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'DataCollaborationErrorInfo'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationResponse, self).__init__(**kwargs)
        self.end_time = kwargs.get('end_time', None)
        self.error = kwargs.get('error', None)
        self.start_time = kwargs.get('start_time', None)
        self.status = kwargs.get('status', None)


class Participant(ProxyDto):
    """Participant information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar created_at: Time at which the account was created.
    :vartype created_at: datetime
    :ivar participant_id: Unique id for identifying a participant
    :vartype participant_id: str
    :ivar proposal_approval_status: Current approval status. Possible values
     include: 'Pending', 'Approved', 'Expired'
    :vartype proposal_approval_status: str or
     ~azure.mgmt.datacollaboration.models.ProposalApprovalStatus
    :ivar user_email: Email of the user who created the resource
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource
    :vartype user_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_at': {'readonly': True},
        'participant_id': {'readonly': True},
        'proposal_approval_status': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'created_at': {'key': 'properties.createdAt', 'type': 'iso-8601'},
        'participant_id': {'key': 'properties.participantId', 'type': 'str'},
        'proposal_approval_status': {'key': 'properties.proposalApprovalStatus', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Participant, self).__init__(**kwargs)
        self.created_at = None
        self.participant_id = None
        self.proposal_approval_status = None
        self.user_email = None
        self.user_name = None


class Pipeline(ProxyDto):
    """A pipeline data transfer object.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param description: General Description of the pipeline content
    :type description: str
    :ivar pipeline_id: Unique id for identifying a pipeline resource
    :vartype pipeline_id: str
    :ivar provisioning_state: Provisioning state of the pipeline. Possible
     values include: 'Succeeded', 'Creating', 'Updating', 'Deleting', 'Moving',
     'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.datacollaboration.models.ProvisioningState
    :param system_data: SystemData Info of pipeline
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'pipeline_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'pipeline_id': {'key': 'properties.pipelineId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs):
        super(Pipeline, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.pipeline_id = None
        self.provisioning_state = None
        self.system_data = kwargs.get('system_data', None)


class PipelineRun(ProxyDto):
    """A pipeline run data transfer object.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar duration_ms: Pipeline run duration
    :vartype duration_ms: int
    :ivar end_time: End time of pipeline run
    :vartype end_time: datetime
    :ivar error_message: Error message if any
    :vartype error_message: str
    :ivar pipeline_id: Object id of the pipeline used to create this run
    :vartype pipeline_id: str
    :ivar pipeline_name: Name of the pipeline used to create this run
    :vartype pipeline_name: str
    :ivar pipeline_run_status: Pipeline run status. Possible values include:
     'Succeeded', 'Failed', 'InProgress', 'Preparing', 'Queued', 'Unknown',
     'Cancelled', 'Canceling'
    :vartype pipeline_run_status: str or
     ~azure.mgmt.datacollaboration.models.PipelineRunStatus
    :ivar start_time: Start time of pipeline run
    :vartype start_time: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'duration_ms': {'readonly': True},
        'end_time': {'readonly': True},
        'error_message': {'readonly': True},
        'pipeline_id': {'readonly': True},
        'pipeline_name': {'readonly': True},
        'pipeline_run_status': {'readonly': True},
        'start_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'duration_ms': {'key': 'properties.durationMs', 'type': 'int'},
        'end_time': {'key': 'properties.endTime', 'type': 'iso-8601'},
        'error_message': {'key': 'properties.errorMessage', 'type': 'str'},
        'pipeline_id': {'key': 'properties.pipelineId', 'type': 'str'},
        'pipeline_name': {'key': 'properties.pipelineName', 'type': 'str'},
        'pipeline_run_status': {'key': 'properties.pipelineRunStatus', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(PipelineRun, self).__init__(**kwargs)
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.pipeline_id = None
        self.pipeline_name = None
        self.pipeline_run_status = None
        self.start_time = None


class PipelineRunParameters(Model):
    """The parameters for a pipeline run.

    :param pipeline_run_mode: Mode of pipeline run used. Possible values
     include: 'Production', 'Test'
    :type pipeline_run_mode: str or
     ~azure.mgmt.datacollaboration.models.PipelineRunMode
    """

    _attribute_map = {
        'pipeline_run_mode': {'key': 'pipelineRunMode', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(PipelineRunParameters, self).__init__(**kwargs)
        self.pipeline_run_mode = kwargs.get('pipeline_run_mode', None)


class PipelineStep(ProxyDto):
    """A single step of a pipeline.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: SynapseSparkPipelineStep

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'SynapseSpark': 'SynapseSparkPipelineStep'}
    }

    def __init__(self, **kwargs):
        super(PipelineStep, self).__init__(**kwargs)
        self.kind = None
        self.kind = 'PipelineStep'


class PipelineStepRun(ProxyDto):
    """pipeline step run at data set level.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar duration_ms: Duration of pipeline step run
    :vartype duration_ms: int
    :ivar end_time: End time of pipeline step run
    :vartype end_time: datetime
    :ivar error_message: Error message if any
    :vartype error_message: str
    :ivar pipeline_step_name: The name of the step used for this step run
    :vartype pipeline_step_name: str
    :ivar pipeline_step_run_status: Pipeline step run status. Possible values
     include: 'Succeeded', 'Failed', 'InProgress', 'Preparing', 'Queued',
     'Unknown', 'Cancelled', 'Canceling'
    :vartype pipeline_step_run_status: str or
     ~azure.mgmt.datacollaboration.models.PipelineStepRunStatus
    :ivar start_time: Start time of pipeline step run
    :vartype start_time: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'duration_ms': {'readonly': True},
        'end_time': {'readonly': True},
        'error_message': {'readonly': True},
        'pipeline_step_name': {'readonly': True},
        'pipeline_step_run_status': {'readonly': True},
        'start_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'duration_ms': {'key': 'properties.durationMs', 'type': 'int'},
        'end_time': {'key': 'properties.endTime', 'type': 'iso-8601'},
        'error_message': {'key': 'properties.errorMessage', 'type': 'str'},
        'pipeline_step_name': {'key': 'properties.pipelineStepName', 'type': 'str'},
        'pipeline_step_run_status': {'key': 'properties.pipelineStepRunStatus', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(PipelineStepRun, self).__init__(**kwargs)
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.pipeline_step_name = None
        self.pipeline_step_run_status = None
        self.start_time = None


class Proposal(ProxyDto):
    """A proposal for data collaboration contract, can be shared and edited by
    multiple participants before signing.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar contract_status: Indicate if the contract is an editable Draft or a
     readonly Active contract. Possible values include: 'Draft', 'Active'
    :vartype contract_status: str or
     ~azure.mgmt.datacollaboration.models.ContractStatus
    :ivar current_version: The proposal version, any change to the proposal or
     any of its underlying resources will result in a different value.
    :vartype current_version: str
    :ivar current_version_timestamp: Timestamp of the last time the proposal
     or any of its underlying resources were updated.
    :vartype current_version_timestamp: datetime
    :param description: Textual description of the proposal
    :type description: str
    :param display_name: Display name of the proposal
    :type display_name: str
    :param invitation_id: The invitation id for joining a proposal
    :type invitation_id: str
    :param invitation_location: The invitation id for joining a proposal
    :type invitation_location: str
    :ivar provisioning_state: Provisioning state of the proposal. Possible
     values include: 'Succeeded', 'Creating', 'Updating', 'Deleting', 'Moving',
     'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.datacollaboration.models.ProvisioningState
    :param terms: Terms of the proposal
    :type terms: str
    :param system_data: SystemData Info of Workspace
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'contract_status': {'readonly': True},
        'current_version': {'readonly': True},
        'current_version_timestamp': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'contract_status': {'key': 'properties.contractStatus', 'type': 'str'},
        'current_version': {'key': 'properties.currentVersion', 'type': 'str'},
        'current_version_timestamp': {'key': 'properties.currentVersionTimestamp', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'invitation_id': {'key': 'properties.invitationId', 'type': 'str'},
        'invitation_location': {'key': 'properties.invitationLocation', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'terms': {'key': 'properties.terms', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs):
        super(Proposal, self).__init__(**kwargs)
        self.contract_status = None
        self.current_version = None
        self.current_version_timestamp = None
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.invitation_id = kwargs.get('invitation_id', None)
        self.invitation_location = kwargs.get('invitation_location', None)
        self.provisioning_state = None
        self.terms = kwargs.get('terms', None)
        self.system_data = kwargs.get('system_data', None)


class ProposalSignature(Model):
    """Dto for Proposal Signing request.

    All required parameters must be populated in order to send to Azure.

    :param proposal_version: Required. Proposal version to be signed
    :type proposal_version: str
    """

    _validation = {
        'proposal_version': {'required': True},
    }

    _attribute_map = {
        'proposal_version': {'key': 'proposalVersion', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProposalSignature, self).__init__(**kwargs)
        self.proposal_version = kwargs.get('proposal_version', None)


class SystemData(Model):
    """SystemData of resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: datetime
    :ivar created_by: A string identifier for the identity that created the
     resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource.
     Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
    :vartype created_by_type: str or
     ~azure.mgmt.datacollaboration.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: datetime
    :ivar last_modified_by: A string identifier for the identity that last
     modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the
     resource. Possible values include: 'User', 'Application',
     'ManagedIdentity', 'Key'
    :vartype last_modified_by_type: str or
     ~azure.mgmt.datacollaboration.models.LastModifiedByType
    """

    _validation = {
        'created_at': {'readonly': True},
        'created_by': {'readonly': True},
        'created_by_type': {'readonly': True},
        'last_modified_at': {'readonly': True},
        'last_modified_by': {'readonly': True},
        'last_modified_by_type': {'readonly': True},
    }

    _attribute_map = {
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SystemData, self).__init__(**kwargs)
        self.created_at = None
        self.created_by = None
        self.created_by_type = None
        self.last_modified_at = None
        self.last_modified_by = None
        self.last_modified_by_type = None


class ResourceReferenceSystemData(SystemData):
    """SystemData Info of resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: datetime
    :ivar created_by: A string identifier for the identity that created the
     resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource.
     Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
    :vartype created_by_type: str or
     ~azure.mgmt.datacollaboration.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: datetime
    :ivar last_modified_by: A string identifier for the identity that last
     modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the
     resource. Possible values include: 'User', 'Application',
     'ManagedIdentity', 'Key'
    :vartype last_modified_by_type: str or
     ~azure.mgmt.datacollaboration.models.LastModifiedByType
    """

    _validation = {
        'created_at': {'readonly': True},
        'created_by': {'readonly': True},
        'created_by_type': {'readonly': True},
        'last_modified_at': {'readonly': True},
        'last_modified_by': {'readonly': True},
        'last_modified_by_type': {'readonly': True},
    }

    _attribute_map = {
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceReferenceSystemData, self).__init__(**kwargs)


class Script(ProxyDto):
    """A script data transfer object.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: SynapseSparkScript

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param system_data: SystemData Info of script
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'SynapseSpark': 'SynapseSparkScript'}
    }

    def __init__(self, **kwargs):
        super(Script, self).__init__(**kwargs)
        self.system_data = kwargs.get('system_data', None)
        self.kind = None
        self.kind = 'Script'


class ScriptConstraint(Constraint):
    """Constraint used to only allow access if the resource is used with a
    specific script.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param system_data: SystemData Info of script
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param description: Description of the constraint.
    :type description: str
    :param script_reference_id: Required. The unique identifier of the script
     reference.
    :type script_reference_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'script_reference_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'script_reference_id': {'key': 'properties.scriptReferenceId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ScriptConstraint, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.script_reference_id = kwargs.get('script_reference_id', None)
        self.kind = 'Script'


class ScriptDataAssetBinding(Model):
    """Binds a data asset reference to a script source or sink by key.

    :param data_asset_id: The bounded data asset Id
    :type data_asset_id: str
    :param key: The key of script's source or sink
    :type key: str
    """

    _attribute_map = {
        'data_asset_id': {'key': 'dataAssetId', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ScriptDataAssetBinding, self).__init__(**kwargs)
        self.data_asset_id = kwargs.get('data_asset_id', None)
        self.key = kwargs.get('key', None)


class ScriptReference(ProxyDto):
    """Script reference dto.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :ivar owner_id: The participant id of the script owner
    :vartype owner_id: str
    :param revision: Required. The revision number of the script being
     referenced.
     If omitted, the script latest version will be referenced.
    :type revision: int
    :param script_id: Required. The unique identifier of the referenced script
    :type script_id: str
    :ivar script_kind: Kind of the referenced script. Possible values include:
     'SynapseSpark'
    :vartype script_kind: str or
     ~azure.mgmt.datacollaboration.models.ScriptKind
    :ivar script_reference_id: Unique id for identifying a script reference
     resource
    :vartype script_reference_id: str
    :ivar script_visibility: The referenced script visibility modifier.
     Possible values include: 'ShowAll', 'HiddenContent'
    :vartype script_visibility: str or
     ~azure.mgmt.datacollaboration.models.ScriptVisibility
    :ivar sinks: The list of parameters the script can use as it's data sinks
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the script can use as it's data
     sources
    :vartype sources: list[str]
    :param system_data: SystemData Info of dataAssetReference
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'owner_id': {'readonly': True},
        'revision': {'required': True},
        'script_id': {'required': True},
        'script_kind': {'readonly': True},
        'script_reference_id': {'readonly': True},
        'script_visibility': {'readonly': True},
        'sinks': {'readonly': True},
        'sources': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'owner_id': {'key': 'properties.ownerId', 'type': 'str'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'script_kind': {'key': 'properties.scriptKind', 'type': 'str'},
        'script_reference_id': {'key': 'properties.scriptReferenceId', 'type': 'str'},
        'script_visibility': {'key': 'properties.scriptVisibility', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs):
        super(ScriptReference, self).__init__(**kwargs)
        self.owner_id = None
        self.revision = kwargs.get('revision', None)
        self.script_id = kwargs.get('script_id', None)
        self.script_kind = None
        self.script_reference_id = None
        self.script_visibility = None
        self.sinks = None
        self.sources = None
        self.system_data = kwargs.get('system_data', None)


class ScriptReferenceResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within
    the specified Azure scriptReference.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Id of the azure resource
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource
    :vartype system_data:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar revision: The revision number of the scriptReference being
     referenced.
     If omitted, the scriptReference latest version will be referenced.
    :vartype revision: int
    :ivar script_kind: Kind of the referenced script. Possible values include:
     'SynapseSpark'
    :vartype script_kind: str or
     ~azure.mgmt.datacollaboration.models.ScriptKind
    :ivar script_reference_id: The unique identifier of the referenced
     scriptReference
    :vartype script_reference_id: str
    :ivar sinks: The list of parameters the scriptReference can use as it's
     data sinks
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the scriptReference can use as it's
     data sources
    :vartype sources: list[str]
    """

    _validation = {
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'required': True},
        'revision': {'readonly': True},
        'script_kind': {'readonly': True},
        'script_reference_id': {'readonly': True},
        'sinks': {'readonly': True},
        'sources': {'readonly': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceReferenceSystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_kind': {'key': 'properties.scriptKind', 'type': 'str'},
        'script_reference_id': {'key': 'properties.scriptReferenceId', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ScriptReferenceResourceReference, self).__init__(**kwargs)
        self.revision = None
        self.script_kind = None
        self.script_reference_id = None
        self.sinks = None
        self.sources = None
        self.kind = 'ScriptReference'


class ScriptResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within
    the specified Azure script.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Id of the azure resource
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource
    :vartype system_data:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar revision: The revision number of the script being referenced.
     If omitted, the script latest version will be referenced.
    :vartype revision: int
    :ivar script_id: The unique identifier of the referenced script
    :vartype script_id: str
    :ivar script_kind: Kind of the referenced script. Possible values include:
     'SynapseSpark'
    :vartype script_kind: str or
     ~azure.mgmt.datacollaboration.models.ScriptKind
    :ivar sinks: The list of parameters the script can use as it's data sinks
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the script can use as it's data
     sources
    :vartype sources: list[str]
    """

    _validation = {
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'required': True},
        'revision': {'readonly': True},
        'script_id': {'readonly': True},
        'script_kind': {'readonly': True},
        'sinks': {'readonly': True},
        'sources': {'readonly': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceReferenceSystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'script_kind': {'key': 'properties.scriptKind', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ScriptResourceReference, self).__init__(**kwargs)
        self.revision = None
        self.script_id = None
        self.script_kind = None
        self.sinks = None
        self.sources = None
        self.kind = 'Script'


class SynapseSparkPipelineStep(PipelineStep):
    """A Synapse Spark based pipeline step.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param cluster_size: Required. Defines the cluster size for running a
     SynapseSpark pipeline step
    :type cluster_size: int
    :param dependencies: List of other steps names, in the same pipeline,
     which this step is depended on
     and should run only when they finish.
    :type dependencies: list[str]
    :param script_id: Required. The script Id that the pipeline step should
     execute
    :type script_id: str
    :param script_revision: Required. The script's revision that the pipeline
     step should execute
    :type script_revision: int
    :param script_sink_bindings: Required. Bindings between the script's sink
     keys and data assets
    :type script_sink_bindings:
     list[~azure.mgmt.datacollaboration.models.ScriptDataAssetBinding]
    :param script_source_bindings: Required. Bindings between the script's
     source keys and data assets
    :type script_source_bindings:
     list[~azure.mgmt.datacollaboration.models.ScriptDataAssetBinding]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'cluster_size': {'required': True},
        'script_id': {'required': True},
        'script_revision': {'required': True},
        'script_sink_bindings': {'required': True},
        'script_source_bindings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'cluster_size': {'key': 'properties.clusterSize', 'type': 'int'},
        'dependencies': {'key': 'properties.dependencies', 'type': '[str]'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'script_revision': {'key': 'properties.scriptRevision', 'type': 'int'},
        'script_sink_bindings': {'key': 'properties.scriptSinkBindings', 'type': '[ScriptDataAssetBinding]'},
        'script_source_bindings': {'key': 'properties.scriptSourceBindings', 'type': '[ScriptDataAssetBinding]'},
    }

    def __init__(self, **kwargs):
        super(SynapseSparkPipelineStep, self).__init__(**kwargs)
        self.cluster_size = kwargs.get('cluster_size', None)
        self.dependencies = kwargs.get('dependencies', None)
        self.script_id = kwargs.get('script_id', None)
        self.script_revision = kwargs.get('script_revision', None)
        self.script_sink_bindings = kwargs.get('script_sink_bindings', None)
        self.script_source_bindings = kwargs.get('script_source_bindings', None)
        self.kind = 'SynapseSpark'


class SynapseSparkScript(Script):
    """A type of script based on the compute engine.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :ivar type: Type of the azure resource
    :vartype type: str
    :param system_data: SystemData Info of script
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param content: Required. The script content
    :type content: str
    :ivar language: Required. The script language. Default value: "Python" .
    :vartype language: str
    :ivar provisioning_state: Provisioning state of the script. Possible
     values include: 'Succeeded', 'Creating', 'Updating', 'Deleting', 'Moving',
     'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.datacollaboration.models.ProvisioningState
    :ivar revision: Latest script revision
    :vartype revision: int
    :ivar script_id: Unique id for identifying a script resource
    :vartype script_id: str
    :param sinks: Required. The list of parameters the script can use as it's
     data sinks
    :type sinks: list[str]
    :param sources: Required. The list of parameters the script can use as
     it's data sources
    :type sources: list[str]
    :param visibility: Required. Script visibility mode. Possible values
     include: 'ShowAll', 'HiddenContent'
    :type visibility: str or ~azure.mgmt.datacollaboration.models.Visibility
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'content': {'required': True},
        'language': {'required': True, 'constant': True},
        'provisioning_state': {'readonly': True},
        'revision': {'readonly': True},
        'script_id': {'readonly': True},
        'sinks': {'required': True},
        'sources': {'required': True},
        'visibility': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'content': {'key': 'properties.content', 'type': 'str'},
        'language': {'key': 'properties.language', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
        'visibility': {'key': 'properties.visibility', 'type': 'str'},
    }

    language = "Python"

    def __init__(self, **kwargs):
        super(SynapseSparkScript, self).__init__(**kwargs)
        self.content = kwargs.get('content', None)
        self.provisioning_state = None
        self.revision = None
        self.script_id = None
        self.sinks = kwargs.get('sinks', None)
        self.sources = kwargs.get('sources', None)
        self.visibility = kwargs.get('visibility', None)
        self.kind = 'SynapseSpark'


class Workspace(DefaultDto):
    """Workspace to hold data collaboration workloads.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource
    :vartype id: str
    :param location: Location of the azure resource.
    :type location: str
    :ivar name: Name of the azure resource
    :vartype name: str
    :param tags: Tags on the azure resource.
    :type tags: dict[str, str]
    :ivar type: Type of the azure resource
    :vartype type: str
    :param identity: Required. Identity Info on the Workspace
    :type identity: ~azure.mgmt.datacollaboration.models.Identity
    :ivar provisioning_state: Provisioning state of the Workspace. Possible
     values include: 'Succeeded', 'Creating', 'Updating', 'Deleting', 'Moving',
     'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.datacollaboration.models.ProvisioningState
    :ivar user_email: Email of the user who created the resource
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource
    :vartype user_name: str
    :param system_data: SystemData Info of Workspace
    :type system_data: ~azure.mgmt.datacollaboration.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'identity': {'required': True},
        'provisioning_state': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'type': {'key': 'type', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs):
        super(Workspace, self).__init__(**kwargs)
        self.identity = kwargs.get('identity', None)
        self.provisioning_state = None
        self.user_email = None
        self.user_name = None
        self.system_data = kwargs.get('system_data', None)


class WorkspaceUpdateParameters(Model):
    """Update parameters for workspaces.

    :param tags: Tags on the azure resource.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(WorkspaceUpdateParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
