# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError

from .. import models


class DevicesOperations(object):
    """DevicesOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def get_all_device_classes(
            self, account_options, custom_headers=None, raw=False, **operation_config):
        """Get the list of device classes under management.

        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of DeviceClass
        :rtype:
         ~azure.iot.deviceupdate.models.DeviceClassPaged[~azure.iot.deviceupdate.models.DeviceClass]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_all_device_classes.metadata['url']
                path_format_arguments = {
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.DeviceClassPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_all_device_classes.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/deviceclasses'}

    def get_device_class(
            self, device_class_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Get device class details.

        :param device_class_id: Device class identifier
        :type device_class_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DeviceClass or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.DeviceClass or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_device_class.metadata['url']
        path_format_arguments = {
            'deviceClassId': self._serialize.url("device_class_id", device_class_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('DeviceClass', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_device_class.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}'}

    def get_device_class_device_ids(
            self, device_class_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Get the list of devices in a device class.

        :param device_class_id: Device class identifier
        :type device_class_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of str
        :rtype: ~azure.iot.deviceupdate.models.StrPaged[str]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_device_class_device_ids.metadata['url']
                path_format_arguments = {
                    'deviceClassId': self._serialize.url("device_class_id", device_class_id, 'str'),
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200, 404]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.StrPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_device_class_device_ids.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}/deviceids'}

    def get_device_class_installable_updates(
            self, device_class_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Get installable updates for a device class.

        :param device_class_id: Device class identifier
        :type device_class_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of UpdateId
        :rtype:
         ~azure.iot.deviceupdate.models.UpdateIdPaged[~azure.iot.deviceupdate.models.UpdateId]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_device_class_installable_updates.metadata['url']
                path_format_arguments = {
                    'deviceClassId': self._serialize.url("device_class_id", device_class_id, 'str'),
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200, 404]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.UpdateIdPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_device_class_installable_updates.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}/installableupdates'}

    def get_all_devices(
            self, account_options, filter=None, custom_headers=None, raw=False, **operation_config):
        """Get list of devices under management.

        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param filter: Restricts the set of devices returned. You can only
         filter on device GroupId.
        :type filter: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of Device
        :rtype:
         ~azure.iot.deviceupdate.models.DevicePaged[~azure.iot.deviceupdate.models.Device]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_all_devices.metadata['url']
                path_format_arguments = {
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                if filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.DevicePaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_all_devices.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/devices'}

    def get_device(
            self, device_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Get device details.

        :param device_id: Device identifier in Azure IOT Hub
        :type device_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Device or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.Device or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_device.metadata['url']
        path_format_arguments = {
            'deviceId': self._serialize.url("device_id", device_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Device', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_device.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/devices/{deviceId}'}

    def get_update_compliance(
            self, account_options, custom_headers=None, raw=False, **operation_config):
        """Get update compliance information.

        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: UpdateCompliance or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.UpdateCompliance or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_update_compliance.metadata['url']
        path_format_arguments = {
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('UpdateCompliance', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_update_compliance.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/updatecompliance'}

    def get_all_device_tags(
            self, account_options, custom_headers=None, raw=False, **operation_config):
        """Get list of all device tags.

        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of DeviceTag
        :rtype:
         ~azure.iot.deviceupdate.models.DeviceTagPaged[~azure.iot.deviceupdate.models.DeviceTag]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_all_device_tags.metadata['url']
                path_format_arguments = {
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.DeviceTagPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_all_device_tags.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/devicetags'}

    def get_device_tag(
            self, tag_name, account_options, custom_headers=None, raw=False, **operation_config):
        """Get device tag details.

        :param tag_name: Tag name
        :type tag_name: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DeviceTag or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.DeviceTag or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_device_tag.metadata['url']
        path_format_arguments = {
            'tagName': self._serialize.url("tag_name", tag_name, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('DeviceTag', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_device_tag.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/devicetags/{tagName}'}

    def get_all_groups(
            self, account_options, custom_headers=None, raw=False, **operation_config):
        """Get list of groups under management.

        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of Group
        :rtype:
         ~azure.iot.deviceupdate.models.GroupPaged[~azure.iot.deviceupdate.models.Group]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_all_groups.metadata['url']
                path_format_arguments = {
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.GroupPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_all_groups.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/groups'}

    def get_group(
            self, group_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Get group details.

        :param group_id: Group identifier
        :type group_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Group or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.Group or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_group.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Group', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_group.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/groups/{groupId}'}

    def create_or_update_group(
            self, group_id, group, account_options, custom_headers=None, raw=False, **operation_config):
        """Create or update group.

        :param group_id: Group identifier
        :type group_id: str
        :param group: The group metadata.
        :type group: ~azure.iot.deviceupdate.models.Group
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Group or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.Group or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.create_or_update_group.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(group, 'Group')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Group', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_or_update_group.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/groups/{groupId}'}

    def delete_group(
            self, group_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Remove group.

        :param group_id: Group identifier
        :type group_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.delete_group.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_group.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/groups/{groupId}'}

    def get_group_update_compliance(
            self, group_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Get group update compliance information.

        :param group_id: Group identifier
        :type group_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: UpdateCompliance or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.UpdateCompliance or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_group_update_compliance.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('UpdateCompliance', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_group_update_compliance.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/groups/{groupId}/updateCompliance'}

    def get_group_best_updates(
            self, group_id, account_options, filter=None, custom_headers=None, raw=False, **operation_config):
        """Get the best available updates for a group and a count of how many
        devices need each update.

        :param group_id: Group identifier
        :type group_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param filter: Restricts the set of bestUpdates returned. You can
         filter on update Provider, Name and Version property.
        :type filter: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PageableListOfUpdatableDevices or ClientRawResponse if
         raw=true
        :rtype: ~azure.iot.deviceupdate.models.PageableListOfUpdatableDevices
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_group_best_updates.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('PageableListOfUpdatableDevices', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_group_best_updates.metadata = {'url': '/deviceupdate/{instanceId}/v2/management/groups/{groupId}/bestUpdates'}
