# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
from msrest.polling import LROPoller, NoPolling
from msrestazure.polling.arm_polling import ARMPolling

from .. import models


class UpdatesOperations(object):
    """UpdatesOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar action: Import update action. Constant value: "import".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.action = "import"

        self.config = config


    def _import_update_initial(
            self, import_manifest, files, account_options, custom_headers=None, raw=False, **operation_config):
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id
        update_to_import = models.ImportUpdateInput(import_manifest=import_manifest, files=files)

        # Construct URL
        url = self.import_update.metadata['url']
        path_format_arguments = {
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['action'] = self._serialize.query("self.action", self.action, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(update_to_import, 'ImportUpdateInput')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202, 429]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        header_dict = {}

        if response.status_code == 200:
            deserialized = self._deserialize('Update', response)
            header_dict = {
                'Location': 'str',
                'Operation-Location': 'str',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized

    def import_update(
            self, import_manifest, files, account_options, custom_headers=None, raw=False, polling=True, **operation_config):
        """Import new update version.

        :param import_manifest: Import manifest metadata like source URL, file
         size/hashes, etc.
        :type import_manifest:
         ~azure.iot.deviceupdate.models.ImportManifestMetadata
        :param files: File properties like filename and source URL.
        :type files: list[~azure.iot.deviceupdate.models.FileImportMetadata]
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: The poller return type is ClientRawResponse, the
         direct response alongside the deserialized response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Update or
         ClientRawResponse<Update> if raw==True
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~azure.iot.deviceupdate.models.Update]
         or
         ~msrestazure.azure_operation.AzureOperationPoller[~msrest.pipeline.ClientRawResponse[~azure.iot.deviceupdate.models.Update]]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        raw_result = self._import_update_initial(
            import_manifest=import_manifest,
            files=files,
            account_options=account_options,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )

        def get_long_running_output(response):
            header_dict = {
                'Location': 'str',
                'Operation-Location': 'str',
            }
            deserialized = self._deserialize('Update', response)

            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                client_raw_response.add_headers(header_dict)
                return client_raw_response

            return deserialized

        lro_delay = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        if polling is True: polling_method = ARMPolling(lro_delay, lro_options={'final-state-via': 'location'}, **operation_config)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    import_update.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates'}

    def get_update(
            self, provider, name, version, account_options, access_condition=None, custom_headers=None, raw=False, **operation_config):
        """Get a specific update version.

        :param provider: Update provider.
        :type provider: str
        :param name: Update name.
        :type name: str
        :param version: Update version.
        :type version: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param access_condition: Additional parameters for the operation
        :type access_condition: ~azure.iot.deviceupdate.models.AccessCondition
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Update or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.Update or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id
        if_none_match = None
        if access_condition is not None:
            if_none_match = access_condition.if_none_match

        # Construct URL
        url = self.get_update.metadata['url']
        path_format_arguments = {
            'provider': self._serialize.url("provider", provider, 'str'),
            'name': self._serialize.url("name", name, 'str'),
            'version': self._serialize.url("version", version, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        if if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", if_none_match, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 304, 404, 429]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Update', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_update.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}'}


    def _delete_update_initial(
            self, provider, name, version, account_options, custom_headers=None, raw=False, **operation_config):
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.delete_update.metadata['url']
        path_format_arguments = {
            'provider': self._serialize.url("provider", provider, 'str'),
            'name': self._serialize.url("name", name, 'str'),
            'version': self._serialize.url("version", version, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202, 429]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            header_dict = {
                'Operation-Location': 'str',
            }
            client_raw_response.add_headers(header_dict)
            return client_raw_response

    def delete_update(
            self, provider, name, version, account_options, custom_headers=None, raw=False, polling=True, **operation_config):
        """Delete a specific update version.

        :param provider: Update provider.
        :type provider: str
        :param name: Update name.
        :type name: str
        :param version: Update version.
        :type version: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: The poller return type is ClientRawResponse, the
         direct response alongside the deserialized response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None or
         ClientRawResponse<None> if raw==True
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None] or
         ~msrestazure.azure_operation.AzureOperationPoller[~msrest.pipeline.ClientRawResponse[None]]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        raw_result = self._delete_update_initial(
            provider=provider,
            name=name,
            version=version,
            account_options=account_options,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )

        def get_long_running_output(response):
            if raw:
                client_raw_response = ClientRawResponse(None, response)
                client_raw_response.add_headers({
                    'Operation-Location': 'str',
                })
                return client_raw_response

        lro_delay = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        if polling is True: polling_method = ARMPolling(lro_delay, **operation_config)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete_update.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}'}

    def get_providers(
            self, account_options, custom_headers=None, raw=False, **operation_config):
        """Enumerate all providers.

        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of str
        :rtype: ~azure.iot.deviceupdate.models.StrPaged[str]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_providers.metadata['url']
                path_format_arguments = {
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200, 304, 429]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.StrPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_providers.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/providers'}

    def get_names(
            self, provider, account_options, custom_headers=None, raw=False, **operation_config):
        """Enumerate all names for a specific provider.

        :param provider: Update provider.
        :type provider: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of str
        :rtype: ~azure.iot.deviceupdate.models.StrPaged[str]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_names.metadata['url']
                path_format_arguments = {
                    'provider': self._serialize.url("provider", provider, 'str'),
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200, 304, 404, 429]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.StrPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_names.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names'}

    def get_versions(
            self, provider, name, account_options, custom_headers=None, raw=False, **operation_config):
        """Enumerate all update versions for a specific provider and name.

        :param provider: Update provider.
        :type provider: str
        :param name: Update name.
        :type name: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of str
        :rtype: ~azure.iot.deviceupdate.models.StrPaged[str]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_versions.metadata['url']
                path_format_arguments = {
                    'provider': self._serialize.url("provider", provider, 'str'),
                    'name': self._serialize.url("name", name, 'str'),
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200, 304, 404, 429]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.StrPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_versions.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions'}

    def get_files(
            self, provider, name, version, account_options, custom_headers=None, raw=False, **operation_config):
        """Enumerate all file identifiers for a specific update version.

        :param provider: Update provider.
        :type provider: str
        :param name: Update name.
        :type name: str
        :param version: Update version.
        :type version: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of str
        :rtype: ~azure.iot.deviceupdate.models.StrPaged[str]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_files.metadata['url']
                path_format_arguments = {
                    'provider': self._serialize.url("provider", provider, 'str'),
                    'name': self._serialize.url("name", name, 'str'),
                    'version': self._serialize.url("version", version, 'str'),
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200, 404, 429]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.StrPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_files.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}/files'}

    def get_file(
            self, provider, name, version, file_id, account_options, custom_headers=None, raw=False, **operation_config):
        """Get a specific update version file.

        :param provider: Update provider.
        :type provider: str
        :param name: Update name.
        :type name: str
        :param version: Update version.
        :type version: str
        :param file_id: File identifier.
        :type file_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: File or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.File or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        # Construct URL
        url = self.get_file.metadata['url']
        path_format_arguments = {
            'provider': self._serialize.url("provider", provider, 'str'),
            'name': self._serialize.url("name", name, 'str'),
            'version': self._serialize.url("version", version, 'str'),
            'fileId': self._serialize.url("file_id", file_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 304, 404, 429]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('File', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_file.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}/files/{fileId}'}

    def get_operations(
            self, account_options, filter=None, top=None, custom_headers=None, raw=False, **operation_config):
        """Enumerate operations details.

        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param filter: Restricts the set of operations returned. You can
         filter on Status and you can only select NotStarted and Running
         operation status when creating filter query.
        :type filter: str
        :param top: Specifies a non-negative integer n that limits the number
         of items returned from a collection. The service returns the number of
         available items up to but not greater than the specified value n.
        :type top: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of Operation
        :rtype:
         ~azure.iot.deviceupdate.models.OperationPaged[~azure.iot.deviceupdate.models.Operation]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_operations.metadata['url']
                path_format_arguments = {
                    'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
                    'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                if filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
                if top is not None:
                    query_parameters['$top'] = self._serialize.query("top", top, 'int')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200, 304, 429]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.OperationPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    get_operations.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/operations'}

    def get_operation(
            self, operation_id, account_options, access_condition=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve operation status.

        :param operation_id: Operation identifier.
        :type operation_id: str
        :param account_options: Additional parameters for the operation
        :type account_options: ~azure.iot.deviceupdate.models.AccountOptions
        :param access_condition: Additional parameters for the operation
        :type access_condition: ~azure.iot.deviceupdate.models.AccessCondition
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Operation or ClientRawResponse if raw=true
        :rtype: ~azure.iot.deviceupdate.models.Operation or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = None
        if account_options is not None:
            self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint = account_options.account_endpoint
        self.config.selfconfiginstance_id = None
        if account_options is not None:
            self.config.selfconfiginstance_id = account_options.instance_id
        if_none_match = None
        if access_condition is not None:
            if_none_match = access_condition.if_none_match

        # Construct URL
        url = self.get_operation.metadata['url']
        path_format_arguments = {
            'operationId': self._serialize.url("operation_id", operation_id, 'str'),
            'accountEndpoint': self._serialize.url("self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint", self.config.selfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigselfconfigaccount_endpoint, 'str', skip_quote=True),
            'instanceId': self._serialize.url("self.config.selfconfiginstance_id", self.config.selfconfiginstance_id, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        if if_none_match is not None:
            header_parameters['If-None-Match'] = self._serialize.header("if_none_match", if_none_match, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 304, 404, 429]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        header_dict = {}
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Operation', response)
            header_dict = {
                'Location': 'str',
                'Retry-After': 'str',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    get_operation.metadata = {'url': '/deviceupdate/{instanceId}/v2/updates/operations/{operationId}'}
