# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AccessCondition(Model):
    """Additional parameters for a set of operations, such as: Updates_get_update,
    Updates_get_operation.

    :param if_none_match: Defines the If-None-Match condition. The operation
     will be performed only if the ETag on the server does not match this
     value.
    :type if_none_match: str
    """

    _attribute_map = {
        'if_none_match': {'key': '', 'type': 'str'},
    }

    def __init__(self, *, if_none_match: str=None, **kwargs) -> None:
        super(AccessCondition, self).__init__(**kwargs)
        self.if_none_match = if_none_match


class AccountOptions(Model):
    """Additional parameters for a set of operations.

    All required parameters must be populated in order to send to Azure.

    :param account_endpoint: Required. Account endpoint. Default value: "" .
    :type account_endpoint: str
    :param instance_id: Required. Account instance identifier.
    :type instance_id: str
    """

    _validation = {
        'account_endpoint': {'required': True},
        'instance_id': {'required': True},
    }

    _attribute_map = {
        'account_endpoint': {'key': '', 'type': 'str'},
        'instance_id': {'key': '', 'type': 'str'},
    }

    def __init__(self, *, account_endpoint: str, instance_id: str, **kwargs) -> None:
        super(AccountOptions, self).__init__(**kwargs)
        self.account_endpoint = account_endpoint
        self.instance_id = instance_id


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Compatibility(Model):
    """Update compatibility information.

    All required parameters must be populated in order to send to Azure.

    :param device_manufacturer: Required. The manufacturer of device the
     update is compatible with.
    :type device_manufacturer: str
    :param device_model: Required. The model of device the update is
     compatible with.
    :type device_model: str
    """

    _validation = {
        'device_manufacturer': {'required': True},
        'device_model': {'required': True},
    }

    _attribute_map = {
        'device_manufacturer': {'key': 'deviceManufacturer', 'type': 'str'},
        'device_model': {'key': 'deviceModel', 'type': 'str'},
    }

    def __init__(self, *, device_manufacturer: str, device_model: str, **kwargs) -> None:
        super(Compatibility, self).__init__(**kwargs)
        self.device_manufacturer = device_manufacturer
        self.device_model = device_model


class Deployment(Model):
    """Deployment metadata.

    All required parameters must be populated in order to send to Azure.

    :param deployment_id: Required. Gets or sets the deployment identifier
    :type deployment_id: str
    :param deployment_type: Required. Gets or sets the deployment type.
     Possible values include: 'Complete', 'Download', 'Install'
    :type deployment_type: str or
     ~azure.iot.deviceupdate.models.DeploymentType
    :param device_class_id: Required. Gets or sets the device class identifier
    :type device_class_id: str
    :param start_date_time: Required. Gets or sets the Deployment start
     datetime
    :type start_date_time: datetime
    :param device_group_type: Required. Gets or sets the device group type.
     Possible values include: 'All', 'Devices', 'DeviceGroupDefinitions'
    :type device_group_type: str or
     ~azure.iot.deviceupdate.models.DeviceGroupType
    :param device_group_definition: Required. Gets or sets the device group
     definition
    :type device_group_definition: list[str]
    :param update_id: Required. Update identity.
    :type update_id: ~azure.iot.deviceupdate.models.UpdateId
    :param is_cancelled: Boolean flag indicating whether the deployment was
     canceled.
    :type is_cancelled: bool
    :param is_retried: Boolean flag indicating whether the deployment has been
     retried.
    :type is_retried: bool
    :param is_completed: Boolean flag indicating whether the deployment was
     completed.
    :type is_completed: bool
    """

    _validation = {
        'deployment_id': {'required': True},
        'deployment_type': {'required': True},
        'device_class_id': {'required': True},
        'start_date_time': {'required': True},
        'device_group_type': {'required': True},
        'device_group_definition': {'required': True},
        'update_id': {'required': True},
    }

    _attribute_map = {
        'deployment_id': {'key': 'deploymentId', 'type': 'str'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'device_class_id': {'key': 'deviceClassId', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'device_group_type': {'key': 'deviceGroupType', 'type': 'str'},
        'device_group_definition': {'key': 'deviceGroupDefinition', 'type': '[str]'},
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'is_cancelled': {'key': 'isCancelled', 'type': 'bool'},
        'is_retried': {'key': 'isRetried', 'type': 'bool'},
        'is_completed': {'key': 'isCompleted', 'type': 'bool'},
    }

    def __init__(self, *, deployment_id: str, deployment_type, device_class_id: str, start_date_time, device_group_type, device_group_definition, update_id, is_cancelled: bool=None, is_retried: bool=None, is_completed: bool=None, **kwargs) -> None:
        super(Deployment, self).__init__(**kwargs)
        self.deployment_id = deployment_id
        self.deployment_type = deployment_type
        self.device_class_id = device_class_id
        self.start_date_time = start_date_time
        self.device_group_type = device_group_type
        self.device_group_definition = device_group_definition
        self.update_id = update_id
        self.is_cancelled = is_cancelled
        self.is_retried = is_retried
        self.is_completed = is_completed


class DeploymentDeviceState(Model):
    """Deployment device status.

    All required parameters must be populated in order to send to Azure.

    :param device_id: Required. Device identity. Possible values include:
     'Active', 'Superseded', 'Canceled'
    :type device_id: str or ~azure.iot.deviceupdate.models.DeploymentState
    :param retry_count: Required. The number of times this deployment has been
     retried on this device
    :type retry_count: int
    :param moved_on_to_new_deployment: Required. Boolean flag indicating
     whether this device is in a newer deployment and can no longer retry this
     deployment
    :type moved_on_to_new_deployment: bool
    :param device_state: Required. Deployment device state. Possible values
     include: 'Succeeded', 'InProgress', 'Failed', 'Canceled', 'Incompatible'
    :type device_state: str or
     ~azure.iot.deviceupdate.models.DeviceDeploymentState
    """

    _validation = {
        'device_id': {'required': True},
        'retry_count': {'required': True},
        'moved_on_to_new_deployment': {'required': True},
        'device_state': {'required': True},
    }

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'retry_count': {'key': 'retryCount', 'type': 'int'},
        'moved_on_to_new_deployment': {'key': 'movedOnToNewDeployment', 'type': 'bool'},
        'device_state': {'key': 'deviceState', 'type': 'str'},
    }

    def __init__(self, *, device_id, retry_count: int, moved_on_to_new_deployment: bool, device_state, **kwargs) -> None:
        super(DeploymentDeviceState, self).__init__(**kwargs)
        self.device_id = device_id
        self.retry_count = retry_count
        self.moved_on_to_new_deployment = moved_on_to_new_deployment
        self.device_state = device_state


class DeploymentFilter(Model):
    """Deployment filter.

    :param provider: Update provider.
    :type provider: str
    :param name: Update name.
    :type name: str
    :param version: Update version.
    :type version: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, name: str=None, version: str=None, **kwargs) -> None:
        super(DeploymentFilter, self).__init__(**kwargs)
        self.provider = provider
        self.name = name
        self.version = version


class DeploymentStatus(Model):
    """Deployment status metadata.

    All required parameters must be populated in order to send to Azure.

    :param deployment_state: Required. Gets or sets the state of the
     deployment. Possible values include: 'Active', 'Superseded', 'Canceled'
    :type deployment_state: str or
     ~azure.iot.deviceupdate.models.DeploymentState
    :param total_devices: Gets or sets the total number of devices in the
     deployment
    :type total_devices: int
    :param devices_incompatible_count: Gets or sets the number of incompatible
     devices in the deployment
    :type devices_incompatible_count: int
    :param devices_in_progress_count: Gets or sets the number of devices that
     are currently in deployment
    :type devices_in_progress_count: int
    :param devices_completed_failed_count: Gets or sets the number of devices
     that have completed deployment with a failure
    :type devices_completed_failed_count: int
    :param devices_completed_succeeded_count: Gets or sets the number of
     devices which have successfully completed deployment
    :type devices_completed_succeeded_count: int
    :param devices_cancelled_count: Gets or sets the number of devices which
     have had their deployment cancelled
    :type devices_cancelled_count: int
    """

    _validation = {
        'deployment_state': {'required': True},
    }

    _attribute_map = {
        'deployment_state': {'key': 'deploymentState', 'type': 'str'},
        'total_devices': {'key': 'totalDevices', 'type': 'int'},
        'devices_incompatible_count': {'key': 'devicesIncompatibleCount', 'type': 'int'},
        'devices_in_progress_count': {'key': 'devicesInProgressCount', 'type': 'int'},
        'devices_completed_failed_count': {'key': 'devicesCompletedFailedCount', 'type': 'int'},
        'devices_completed_succeeded_count': {'key': 'devicesCompletedSucceededCount', 'type': 'int'},
        'devices_cancelled_count': {'key': 'devicesCancelledCount', 'type': 'int'},
    }

    def __init__(self, *, deployment_state, total_devices: int=None, devices_incompatible_count: int=None, devices_in_progress_count: int=None, devices_completed_failed_count: int=None, devices_completed_succeeded_count: int=None, devices_cancelled_count: int=None, **kwargs) -> None:
        super(DeploymentStatus, self).__init__(**kwargs)
        self.deployment_state = deployment_state
        self.total_devices = total_devices
        self.devices_incompatible_count = devices_incompatible_count
        self.devices_in_progress_count = devices_in_progress_count
        self.devices_completed_failed_count = devices_completed_failed_count
        self.devices_completed_succeeded_count = devices_completed_succeeded_count
        self.devices_cancelled_count = devices_cancelled_count


class Device(Model):
    """Device metadata.

    All required parameters must be populated in order to send to Azure.

    :param device_id: Required. Device identity.
    :type device_id: str
    :param device_class_id: Required. Device class identity.
    :type device_class_id: str
    :param manufacturer: Required. Device manufacturer
    :type manufacturer: str
    :param model: Required. Device model
    :type model: str
    :param group_id: Device group identity
    :type group_id: str
    :param last_attemped_update_id: Update identity.
    :type last_attemped_update_id: ~azure.iot.deviceupdate.models.UpdateId
    :param deployment_status: State of the device in its last deployment.
     Possible values include: 'Succeeded', 'InProgress', 'Failed', 'Canceled',
     'Incompatible'
    :type deployment_status: str or
     ~azure.iot.deviceupdate.models.DeviceDeploymentState
    :param installed_updat_id: Update identity.
    :type installed_updat_id: ~azure.iot.deviceupdate.models.UpdateId
    :param on_latest_update: Required. Boolean flag indicating whether the
     latest update is installed on the device
    :type on_latest_update: bool
    """

    _validation = {
        'device_id': {'required': True},
        'device_class_id': {'required': True},
        'manufacturer': {'required': True},
        'model': {'required': True},
        'on_latest_update': {'required': True},
    }

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'device_class_id': {'key': 'deviceClassId', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'last_attemped_update_id': {'key': 'lastAttempedUpdateId', 'type': 'UpdateId'},
        'deployment_status': {'key': 'deploymentStatus', 'type': 'str'},
        'installed_updat_id': {'key': 'installedUpdatId', 'type': 'UpdateId'},
        'on_latest_update': {'key': 'onLatestUpdate', 'type': 'bool'},
    }

    def __init__(self, *, device_id: str, device_class_id: str, manufacturer: str, model: str, on_latest_update: bool, group_id: str=None, last_attemped_update_id=None, deployment_status=None, installed_updat_id=None, **kwargs) -> None:
        super(Device, self).__init__(**kwargs)
        self.device_id = device_id
        self.device_class_id = device_class_id
        self.manufacturer = manufacturer
        self.model = model
        self.group_id = group_id
        self.last_attemped_update_id = last_attemped_update_id
        self.deployment_status = deployment_status
        self.installed_updat_id = installed_updat_id
        self.on_latest_update = on_latest_update


class DeviceClass(Model):
    """Device class metadata.

    All required parameters must be populated in order to send to Azure.

    :param device_class_id: Required. Device class identity.
    :type device_class_id: str
    :param manufacturer: Required. Device manufacturer
    :type manufacturer: str
    :param model: Required. Device model
    :type model: str
    :param best_compatible_update_id: Required. Update identity.
    :type best_compatible_update_id: ~azure.iot.deviceupdate.models.UpdateId
    """

    _validation = {
        'device_class_id': {'required': True},
        'manufacturer': {'required': True},
        'model': {'required': True},
        'best_compatible_update_id': {'required': True},
    }

    _attribute_map = {
        'device_class_id': {'key': 'deviceClassId', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'best_compatible_update_id': {'key': 'bestCompatibleUpdateId', 'type': 'UpdateId'},
    }

    def __init__(self, *, device_class_id: str, manufacturer: str, model: str, best_compatible_update_id, **kwargs) -> None:
        super(DeviceClass, self).__init__(**kwargs)
        self.device_class_id = device_class_id
        self.manufacturer = manufacturer
        self.model = model
        self.best_compatible_update_id = best_compatible_update_id


class DeviceFilter(Model):
    """Operation status filter.

    :param group_id: Device group identifier
    :type group_id: str
    """

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
    }

    def __init__(self, *, group_id: str=None, **kwargs) -> None:
        super(DeviceFilter, self).__init__(**kwargs)
        self.group_id = group_id


class DeviceTag(Model):
    """Device tag details.

    All required parameters must be populated in order to send to Azure.

    :param tag_name: Required. Tag name
    :type tag_name: str
    :param device_count: Required. Number of devices with this tag
    :type device_count: int
    """

    _validation = {
        'tag_name': {'required': True},
        'device_count': {'required': True},
    }

    _attribute_map = {
        'tag_name': {'key': 'tagName', 'type': 'str'},
        'device_count': {'key': 'deviceCount', 'type': 'int'},
    }

    def __init__(self, *, tag_name: str, device_count: int, **kwargs) -> None:
        super(DeviceTag, self).__init__(**kwargs)
        self.tag_name = tag_name
        self.device_count = device_count


class Error(Model):
    """Error details.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Server defined error code.
    :type code: str
    :param message: Required. A human-readable representation of the error.
    :type message: str
    :param target: The target of the error.
    :type target: str
    :param details: An array of details about specific errors that led to the
     reported error.
    :type details: list[~azure.iot.deviceupdate.models.Error]
    :param innererror: An object containing more specific information than the
     current object about the error.
    :type innererror: ~azure.iot.deviceupdate.models.InnerError
    :param occurred_date_time: Date and time when the error occured.
    :type occurred_date_time: datetime
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
        'occurred_date_time': {'key': 'occurredDateTime', 'type': 'iso-8601'},
    }

    def __init__(self, *, code: str, message: str, target: str=None, details=None, innererror=None, occurred_date_time=None, **kwargs) -> None:
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
        self.occurred_date_time = occurred_date_time


class File(Model):
    """File metadata.

    All required parameters must be populated in order to send to Azure.

    :param file_id: Required. File identity
    :type file_id: str
    :param file_name: Required. File name
    :type file_name: str
    :param size_in_bytes: Required. File size in number of bytes.
    :type size_in_bytes: long
    :param hashes: Required. Mapping of hashing algorithm to base64 encoded
     hash values.
    :type hashes: dict[str, str]
    :param mime_type: File MIME type.
    :type mime_type: str
    :param etag: Gets or sets the ETag of the entity.
    :type etag: str
    """

    _validation = {
        'file_id': {'required': True},
        'file_name': {'required': True},
        'size_in_bytes': {'required': True},
        'hashes': {'required': True},
    }

    _attribute_map = {
        'file_id': {'key': 'fileId', 'type': 'str'},
        'file_name': {'key': 'fileName', 'type': 'str'},
        'size_in_bytes': {'key': 'sizeInBytes', 'type': 'long'},
        'hashes': {'key': 'hashes', 'type': '{str}'},
        'mime_type': {'key': 'mimeType', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, *, file_id: str, file_name: str, size_in_bytes: int, hashes, mime_type: str=None, etag: str=None, **kwargs) -> None:
        super(File, self).__init__(**kwargs)
        self.file_id = file_id
        self.file_name = file_name
        self.size_in_bytes = size_in_bytes
        self.hashes = hashes
        self.mime_type = mime_type
        self.etag = etag


class FileImportMetadata(Model):
    """Import file metadata.

    All required parameters must be populated in order to send to Azure.

    :param filename: Required. File name.
    :type filename: str
    :param url: Required. Source download URL.
    :type url: str
    """

    _validation = {
        'filename': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'filename': {'key': 'filename', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(self, *, filename: str, url: str, **kwargs) -> None:
        super(FileImportMetadata, self).__init__(**kwargs)
        self.filename = filename
        self.url = url


class Group(Model):
    """Group details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param group_id: Required. Group identity
    :type group_id: str
    :ivar group_type: Required. Group type. Default value: "IoTHubTag" .
    :vartype group_type: str
    :param tags: Required. IoT Hub tags
    :type tags: list[str]
    :param created_date_time: Required. Date and time when the update was
     created.
    :type created_date_time: str
    """

    _validation = {
        'group_id': {'required': True},
        'group_type': {'required': True, 'constant': True},
        'tags': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'group_type': {'key': 'groupType', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
    }

    group_type = "IoTHubTag"

    def __init__(self, *, group_id: str, tags, created_date_time: str, **kwargs) -> None:
        super(Group, self).__init__(**kwargs)
        self.group_id = group_id
        self.tags = tags
        self.created_date_time = created_date_time


class GroupBestUpdatesFilter(Model):
    """Group bestupdates filter.

    :param provider: Update provider.
    :type provider: str
    :param name: Update name.
    :type name: str
    :param version: Update version.
    :type version: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, name: str=None, version: str=None, **kwargs) -> None:
        super(GroupBestUpdatesFilter, self).__init__(**kwargs)
        self.provider = provider
        self.name = name
        self.version = version


class ImportManifestMetadata(Model):
    """Import manifest metadata.

    All required parameters must be populated in order to send to Azure.

    :param url: Required. Source download URL.
    :type url: str
    :param size_in_bytes: Required. File size in number of bytes.
    :type size_in_bytes: long
    :param hashes: Required. Hash(es) of import manifest file.
    :type hashes: dict[str, str]
    """

    _validation = {
        'url': {'required': True},
        'size_in_bytes': {'required': True},
        'hashes': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'size_in_bytes': {'key': 'sizeInBytes', 'type': 'long'},
        'hashes': {'key': 'hashes', 'type': '{str}'},
    }

    def __init__(self, *, url: str, size_in_bytes: int, hashes, **kwargs) -> None:
        super(ImportManifestMetadata, self).__init__(**kwargs)
        self.url = url
        self.size_in_bytes = size_in_bytes
        self.hashes = hashes


class ImportUpdateInput(Model):
    """Import update input metadata.

    All required parameters must be populated in order to send to Azure.

    :param import_manifest: Required. Import manifest metadata like source
     URL, file size/hashes, etc.
    :type import_manifest:
     ~azure.iot.deviceupdate.models.ImportManifestMetadata
    :param files: Required. File properties like filename and source URL.
    :type files: list[~azure.iot.deviceupdate.models.FileImportMetadata]
    """

    _validation = {
        'import_manifest': {'required': True},
        'files': {'required': True, 'min_items': 1},
    }

    _attribute_map = {
        'import_manifest': {'key': 'importManifest', 'type': 'ImportManifestMetadata'},
        'files': {'key': 'files', 'type': '[FileImportMetadata]'},
    }

    def __init__(self, *, import_manifest, files, **kwargs) -> None:
        super(ImportUpdateInput, self).__init__(**kwargs)
        self.import_manifest = import_manifest
        self.files = files


class InnerError(Model):
    """An object containing more specific information than the current object
    about the error.

    :param code: A more specific error code than was provided by the
     containing error.
    :type code: str
    :param innererror: An object containing more specific information than the
     current object about the error.
    :type innererror: ~azure.iot.deviceupdate.models.InnerError
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
    }

    def __init__(self, *, code: str=None, innererror=None, **kwargs) -> None:
        super(InnerError, self).__init__(**kwargs)
        self.code = code
        self.innererror = innererror


class Operation(Model):
    """Operation metadata.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: Required. Operation Id.
    :type operation_id: str
    :param status: Required. Operation status. Possible values include:
     'Undefined', 'NotStarted', 'Running', 'Succeeded', 'Failed'
    :type status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :param update_id: The identity of update the operation is working on.
    :type update_id: ~azure.iot.deviceupdate.models.UpdateId
    :param resource_location: The created resource location if any (PUT or
     POST methods)
    :type resource_location: str
    :param error: Operation error encountered if any.
    :type error: ~azure.iot.deviceupdate.models.Error
    :param trace_id: W3C Trace Context base traceId used for creating and
     running the job.
    :type trace_id: str
    :param last_action_date_time: Required. Date time when the operation
     status was last updated.
    :type last_action_date_time: datetime
    :param created_date_time: Required. Date time when the operation was
     created
    :type created_date_time: datetime
    :param etag: Operation etag
    :type etag: str
    """

    _validation = {
        'operation_id': {'required': True},
        'status': {'required': True},
        'last_action_date_time': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
        'trace_id': {'key': 'traceId', 'type': 'str'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, *, operation_id: str, status, last_action_date_time, created_date_time, update_id=None, resource_location: str=None, error=None, trace_id: str=None, etag: str=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.status = status
        self.update_id = update_id
        self.resource_location = resource_location
        self.error = error
        self.trace_id = trace_id
        self.last_action_date_time = last_action_date_time
        self.created_date_time = created_date_time
        self.etag = etag


class OperationFilter(Model):
    """Operation status filter.

    :param status: Operation status filter. Possible values include:
     'Running', 'NotStarted'
    :type status: str or ~azure.iot.deviceupdate.models.OperationFilterStatus
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, *, status=None, **kwargs) -> None:
        super(OperationFilter, self).__init__(**kwargs)
        self.status = status


class PageableListOfDeploymentDeviceStates(Model):
    """The list of deployment device states.

    :param value: The collection of pageable items.
    :type value: list[~azure.iot.deviceupdate.models.DeploymentDeviceState]
    :param next_link: The link to the next page of items.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeploymentDeviceState]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, *, value=None, next_link: str=None, **kwargs) -> None:
        super(PageableListOfDeploymentDeviceStates, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PageableListOfUpdatableDevices(Model):
    """The list of updatable devices.

    :param value: The collection of pageable items.
    :type value: list[~azure.iot.deviceupdate.models.UpdatableDevices]
    :param next_link: The link to the next page of items.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UpdatableDevices]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, *, value=None, next_link: str=None, **kwargs) -> None:
        super(PageableListOfUpdatableDevices, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UpdatableDevices(Model):
    """Number of devices updatable by the update.

    All required parameters must be populated in order to send to Azure.

    :param update_id: Required. Update identity.
    :type update_id: ~azure.iot.deviceupdate.models.UpdateId
    :param device_count: Required. Total number of devices for which the
     update is applicable
    :type device_count: int
    """

    _validation = {
        'update_id': {'required': True},
        'device_count': {'required': True},
    }

    _attribute_map = {
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'device_count': {'key': 'deviceCount', 'type': 'int'},
    }

    def __init__(self, *, update_id, device_count: int, **kwargs) -> None:
        super(UpdatableDevices, self).__init__(**kwargs)
        self.update_id = update_id
        self.device_count = device_count


class Update(Model):
    """Update metadata.

    All required parameters must be populated in order to send to Azure.

    :param update_id: Required. Update identity.
    :type update_id: ~azure.iot.deviceupdate.models.UpdateId
    :param update_type: Required. Update type. Optional.
    :type update_type: str
    :param installed_criteria: Required. Installed Criteria. Will always be
     present in manifest version 0.1 or later.
    :type installed_criteria: str
    :param compatibility: Required. List of update compatibility information.
    :type compatibility: list[~azure.iot.deviceupdate.models.Compatibility]
    :param manifest_version: Required. Update manifest schema version.
     Optional.
    :type manifest_version: str
    :param imported_date_time: Required. Date and time when update was
     imported.
    :type imported_date_time: datetime
    :param created_date_time: Date and time when the update was created.
    :type created_date_time: datetime
    :param etag: Update etag.
    :type etag: str
    """

    _validation = {
        'update_id': {'required': True},
        'update_type': {'required': True},
        'installed_criteria': {'required': True},
        'compatibility': {'required': True, 'min_items': 1},
        'manifest_version': {'required': True},
        'imported_date_time': {'required': True},
    }

    _attribute_map = {
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'update_type': {'key': 'updateType', 'type': 'str'},
        'installed_criteria': {'key': 'installedCriteria', 'type': 'str'},
        'compatibility': {'key': 'compatibility', 'type': '[Compatibility]'},
        'manifest_version': {'key': 'manifestVersion', 'type': 'str'},
        'imported_date_time': {'key': 'importedDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, *, update_id, update_type: str, installed_criteria: str, compatibility, manifest_version: str, imported_date_time, created_date_time=None, etag: str=None, **kwargs) -> None:
        super(Update, self).__init__(**kwargs)
        self.update_id = update_id
        self.update_type = update_type
        self.installed_criteria = installed_criteria
        self.compatibility = compatibility
        self.manifest_version = manifest_version
        self.imported_date_time = imported_date_time
        self.created_date_time = created_date_time
        self.etag = etag


class UpdateCompliance(Model):
    """Update compliance information.

    All required parameters must be populated in order to send to Azure.

    :param total_device_count: Required. Total number of devices
    :type total_device_count: int
    :param on_latest_update_device_count: Required. Number of devices on the
     latest update
    :type on_latest_update_device_count: int
    :param new_updates_available_device_count: Required. Number of devices
     with a newer update available
    :type new_updates_available_device_count: int
    :param updates_in_progress_device_count: Required. Number of devices with
     update in-progress
    :type updates_in_progress_device_count: int
    """

    _validation = {
        'total_device_count': {'required': True},
        'on_latest_update_device_count': {'required': True},
        'new_updates_available_device_count': {'required': True},
        'updates_in_progress_device_count': {'required': True},
    }

    _attribute_map = {
        'total_device_count': {'key': 'totalDeviceCount', 'type': 'int'},
        'on_latest_update_device_count': {'key': 'onLatestUpdateDeviceCount', 'type': 'int'},
        'new_updates_available_device_count': {'key': 'newUpdatesAvailableDeviceCount', 'type': 'int'},
        'updates_in_progress_device_count': {'key': 'updatesInProgressDeviceCount', 'type': 'int'},
    }

    def __init__(self, *, total_device_count: int, on_latest_update_device_count: int, new_updates_available_device_count: int, updates_in_progress_device_count: int, **kwargs) -> None:
        super(UpdateCompliance, self).__init__(**kwargs)
        self.total_device_count = total_device_count
        self.on_latest_update_device_count = on_latest_update_device_count
        self.new_updates_available_device_count = new_updates_available_device_count
        self.updates_in_progress_device_count = updates_in_progress_device_count


class UpdateId(Model):
    """Update identifier.

    All required parameters must be populated in order to send to Azure.

    :param provider: Required. Update provider.
    :type provider: str
    :param name: Required. Update name.
    :type name: str
    :param version: Required. Update version.
    :type version: str
    """

    _validation = {
        'provider': {'required': True},
        'name': {'required': True},
        'version': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, *, provider: str, name: str, version: str, **kwargs) -> None:
        super(UpdateId, self).__init__(**kwargs)
        self.provider = provider
        self.name = name
        self.version = version
