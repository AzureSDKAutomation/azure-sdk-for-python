# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AgreementDefinition(Model):
    """AgreementDefinition.

    :param id:
    :type id: str
    :param name:
    :type name: str
    :param type:
    :type type: str
    :param properties:
    :type properties:
     ~azure.mgmt.marketplaceordering.models.AgreementProperties
    """

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'type': {'key': 'Type', 'type': 'str'},
        'properties': {'key': 'Properties', 'type': 'AgreementProperties'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, properties=None, **kwargs) -> None:
        super(AgreementDefinition, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type
        self.properties = properties


class AgreementProperties(Model):
    """AgreementProperties.

    :param publisher:
    :type publisher: str
    :param product:
    :type product: str
    :param plan:
    :type plan: str
    :param license_text_link:
    :type license_text_link: str
    :param privacy_policy_link:
    :type privacy_policy_link: str
    :param retrieve_datetime:
    :type retrieve_datetime: datetime
    :param signature:
    :type signature: str
    :param accepted:
    :type accepted: bool
    """

    _attribute_map = {
        'publisher': {'key': 'Publisher', 'type': 'str'},
        'product': {'key': 'Product', 'type': 'str'},
        'plan': {'key': 'Plan', 'type': 'str'},
        'license_text_link': {'key': 'LicenseTextLink', 'type': 'str'},
        'privacy_policy_link': {'key': 'PrivacyPolicyLink', 'type': 'str'},
        'retrieve_datetime': {'key': 'RetrieveDatetime', 'type': 'iso-8601'},
        'signature': {'key': 'Signature', 'type': 'str'},
        'accepted': {'key': 'Accepted', 'type': 'bool'},
    }

    def __init__(self, *, publisher: str=None, product: str=None, plan: str=None, license_text_link: str=None, privacy_policy_link: str=None, retrieve_datetime=None, signature: str=None, accepted: bool=None, **kwargs) -> None:
        super(AgreementProperties, self).__init__(**kwargs)
        self.publisher = publisher
        self.product = product
        self.plan = plan
        self.license_text_link = license_text_link
        self.privacy_policy_link = privacy_policy_link
        self.retrieve_datetime = retrieve_datetime
        self.signature = signature
        self.accepted = accepted


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class ErrorResponse(Model):
    """Error response indicates Microsoft.MarketplaceOrdering service is not able
    to process the incoming request. The reason is provided in the error
    message.

    :param error: The details of the error.
    :type error: ~azure.mgmt.marketplaceordering.models.ErrorResponseError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponseError'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class ErrorResponseError(Model):
    """The details of the error.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message indicating why the operation failed.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorResponseError, self).__init__(**kwargs)
        self.code = None
        self.message = None
