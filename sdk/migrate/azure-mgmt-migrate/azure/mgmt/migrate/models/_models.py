# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AssessedDisk(Model):
    """A disk assessed for an assessment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the assessed disk.
    :vartype name: str
    :ivar gigabytes_provisioned: Gigabytes of storage provisioned for this
     disk.
    :vartype gigabytes_provisioned: float
    :ivar gigabytes_consumed: Gigabytes of storage consumed by this disk.
    :vartype gigabytes_consumed: float
    :ivar megabytes_per_second_of_read: Disk throughput in MegaBytes per
     second.
    :vartype megabytes_per_second_of_read: float
    :ivar megabytes_per_second_of_read_data_points_expected: Expected data
     points for MegaBytes per second of read.
    :vartype megabytes_per_second_of_read_data_points_expected: int
    :ivar megabytes_per_second_of_read_data_points_received: Received data
     points for MegaBytes per second of read.
    :vartype megabytes_per_second_of_read_data_points_received: int
    :ivar megabytes_per_second_of_write: Disk throughput in MegaBytes per
     second.
    :vartype megabytes_per_second_of_write: float
    :ivar megabytes_per_second_of_write_data_points_expected: Expected data
     points for MegaBytes per second of write.
    :vartype megabytes_per_second_of_write_data_points_expected: int
    :ivar megabytes_per_second_of_write_data_points_received: Received data
     points for MegaBytes per second of write.
    :vartype megabytes_per_second_of_write_data_points_received: int
    :ivar number_of_read_operations_per_second: Number of read operations per
     second for the disk.
    :vartype number_of_read_operations_per_second: float
    :ivar number_of_read_operations_per_second_data_points_expected: Expected
     number of data points for read operations per second.
    :vartype number_of_read_operations_per_second_data_points_expected: int
    :ivar number_of_read_operations_per_second_data_points_received: Received
     number of data points for read operations per second.
    :vartype number_of_read_operations_per_second_data_points_received: int
    :ivar number_of_write_operations_per_second: Number of read and write
     operations per second for the disk.
    :vartype number_of_write_operations_per_second: float
    :ivar number_of_write_operations_per_second_data_points_expected: Expected
     number of data points for write operations per second.
    :vartype number_of_write_operations_per_second_data_points_expected: int
    :ivar number_of_write_operations_per_second_data_points_received: Received
     number of data points for write operations per second.
    :vartype number_of_write_operations_per_second_data_points_received: int
    :ivar monthly_storage_cost: Estimated aggregate storage cost for a 31-day
     month for this disk.
    :vartype monthly_storage_cost: float
    :ivar recommended_disk_type: Storage type selected for this disk. Possible
     values include: 'Unknown', 'Standard', 'Premium'
    :vartype recommended_disk_type: str or ~migrate.models.AzureDiskType
    :ivar recommended_disk_size: Recommended Azure size for the disk, given
     utilization data and preferences set on Assessment. Possible values
     include: 'Unknown', 'Standard_S4', 'Standard_S6', 'Standard_S10',
     'Standard_S20', 'Standard_S30', 'Standard_S40', 'Standard_S50',
     'Premium_P4', 'Premium_P6', 'Premium_P10', 'Premium_P20', 'Premium_P30',
     'Premium_P40', 'Premium_P50'
    :vartype recommended_disk_size: str or ~migrate.models.AzureDiskSize
    :ivar gigabytes_for_recommended_disk_size: Gigabytes of storage provided
     by the recommended Azure disk size.
    :vartype gigabytes_for_recommended_disk_size: int
    :ivar suitability: Whether this disk is suitable for Azure. Possible
     values include: 'Unknown', 'NotSuitable', 'Suitable',
     'ConditionallySuitable', 'ReadinessUnknown'
    :vartype suitability: str or ~migrate.models.CloudSuitability
    :ivar suitability_explanation: If disk is suitable, this explains the
     reasons and mitigation steps. Possible values include: 'Unknown',
     'NotApplicable', 'DiskSizeGreaterThanSupported',
     'NoSuitableDiskSizeForIops', 'NoSuitableDiskSizeForThroughput',
     'NoDiskSizeFoundInSelectedLocation',
     'NoDiskSizeFoundForSelectedRedundancy',
     'InternalErrorOccurredForDiskEvaluation'
    :vartype suitability_explanation: str or
     ~migrate.models.AzureDiskSuitabilityExplanation
    """

    _validation = {
        'name': {'readonly': True},
        'gigabytes_provisioned': {'readonly': True},
        'gigabytes_consumed': {'readonly': True},
        'megabytes_per_second_of_read': {'readonly': True},
        'megabytes_per_second_of_read_data_points_expected': {'readonly': True},
        'megabytes_per_second_of_read_data_points_received': {'readonly': True},
        'megabytes_per_second_of_write': {'readonly': True},
        'megabytes_per_second_of_write_data_points_expected': {'readonly': True},
        'megabytes_per_second_of_write_data_points_received': {'readonly': True},
        'number_of_read_operations_per_second': {'readonly': True},
        'number_of_read_operations_per_second_data_points_expected': {'readonly': True},
        'number_of_read_operations_per_second_data_points_received': {'readonly': True},
        'number_of_write_operations_per_second': {'readonly': True},
        'number_of_write_operations_per_second_data_points_expected': {'readonly': True},
        'number_of_write_operations_per_second_data_points_received': {'readonly': True},
        'monthly_storage_cost': {'readonly': True},
        'recommended_disk_type': {'readonly': True},
        'recommended_disk_size': {'readonly': True},
        'gigabytes_for_recommended_disk_size': {'readonly': True},
        'suitability': {'readonly': True},
        'suitability_explanation': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'gigabytes_provisioned': {'key': 'gigabytesProvisioned', 'type': 'float'},
        'gigabytes_consumed': {'key': 'gigabytesConsumed', 'type': 'float'},
        'megabytes_per_second_of_read': {'key': 'megabytesPerSecondOfRead', 'type': 'float'},
        'megabytes_per_second_of_read_data_points_expected': {'key': 'megabytesPerSecondOfReadDataPointsExpected', 'type': 'int'},
        'megabytes_per_second_of_read_data_points_received': {'key': 'megabytesPerSecondOfReadDataPointsReceived', 'type': 'int'},
        'megabytes_per_second_of_write': {'key': 'megabytesPerSecondOfWrite', 'type': 'float'},
        'megabytes_per_second_of_write_data_points_expected': {'key': 'megabytesPerSecondOfWriteDataPointsExpected', 'type': 'int'},
        'megabytes_per_second_of_write_data_points_received': {'key': 'megabytesPerSecondOfWriteDataPointsReceived', 'type': 'int'},
        'number_of_read_operations_per_second': {'key': 'numberOfReadOperationsPerSecond', 'type': 'float'},
        'number_of_read_operations_per_second_data_points_expected': {'key': 'numberOfReadOperationsPerSecondDataPointsExpected', 'type': 'int'},
        'number_of_read_operations_per_second_data_points_received': {'key': 'numberOfReadOperationsPerSecondDataPointsReceived', 'type': 'int'},
        'number_of_write_operations_per_second': {'key': 'numberOfWriteOperationsPerSecond', 'type': 'float'},
        'number_of_write_operations_per_second_data_points_expected': {'key': 'numberOfWriteOperationsPerSecondDataPointsExpected', 'type': 'int'},
        'number_of_write_operations_per_second_data_points_received': {'key': 'numberOfWriteOperationsPerSecondDataPointsReceived', 'type': 'int'},
        'monthly_storage_cost': {'key': 'monthlyStorageCost', 'type': 'float'},
        'recommended_disk_type': {'key': 'recommendedDiskType', 'type': 'str'},
        'recommended_disk_size': {'key': 'recommendedDiskSize', 'type': 'str'},
        'gigabytes_for_recommended_disk_size': {'key': 'gigabytesForRecommendedDiskSize', 'type': 'int'},
        'suitability': {'key': 'suitability', 'type': 'str'},
        'suitability_explanation': {'key': 'suitabilityExplanation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AssessedDisk, self).__init__(**kwargs)
        self.name = None
        self.gigabytes_provisioned = None
        self.gigabytes_consumed = None
        self.megabytes_per_second_of_read = None
        self.megabytes_per_second_of_read_data_points_expected = None
        self.megabytes_per_second_of_read_data_points_received = None
        self.megabytes_per_second_of_write = None
        self.megabytes_per_second_of_write_data_points_expected = None
        self.megabytes_per_second_of_write_data_points_received = None
        self.number_of_read_operations_per_second = None
        self.number_of_read_operations_per_second_data_points_expected = None
        self.number_of_read_operations_per_second_data_points_received = None
        self.number_of_write_operations_per_second = None
        self.number_of_write_operations_per_second_data_points_expected = None
        self.number_of_write_operations_per_second_data_points_received = None
        self.monthly_storage_cost = None
        self.recommended_disk_type = None
        self.recommended_disk_size = None
        self.gigabytes_for_recommended_disk_size = None
        self.suitability = None
        self.suitability_explanation = None


class AssessedMachine(Model):
    """A machine evaluated as part of an assessment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Path reference to this assessed machine.
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
    :vartype id: str
    :ivar name: Name of the machine.
    :vartype name: str
    :param e_tag: For optimistic concurrency control.
    :type e_tag: str
    :ivar type: Type of the object =
     [Microsoft.Migrate/projects/groups/assessments/assessedMachines].
    :vartype type: str
    :ivar groups: List of references to the groups that the machine is member
     of.
    :vartype groups: list[str]
    :ivar discovered_timestamp: Time when this machine was discovered by Azure
     Migrate agent. Date-Time represented in ISO-8601 format.
    :vartype discovered_timestamp: datetime
    :ivar boot_type: Boot type of the machine. Possible values include:
     'Unknown', 'EFI', 'BIOS'
    :vartype boot_type: str or ~migrate.models.MachineBootType
    :ivar datacenter_container: Container defined in the management solution
     that this machine is part of in the datacenter.
    :vartype datacenter_container: str
    :ivar datacenter_management_server: Name of the server hosting the
     datacenter management solution.
    :vartype datacenter_management_server: str
    :ivar datacenter_machine_id: ID of the machine as tracked by the
     datacenter management solution.
    :vartype datacenter_machine_id: str
    :ivar datacenter_management_server_id: ID of the server hosting the
     datacenter management solution.
    :vartype datacenter_management_server_id: str
    :ivar description: Description of the machine
    :vartype description: str
    :ivar display_name: User readable name of the machine as defined by the
     user in their private datacenter.
    :vartype display_name: str
    :ivar megabytes_of_memory: Memory in Megabytes.
    :vartype megabytes_of_memory: float
    :ivar number_of_cores: Processor count.
    :vartype number_of_cores: int
    :ivar operating_system: Operating System of the machine.
    :vartype operating_system: str
    :ivar monthly_bandwidth_cost: Monthly network cost estimate for the
     network adapters that are attached to this machine as a group, for a
     31-day month.
    :vartype monthly_bandwidth_cost: float
    :ivar monthly_storage_cost: Monthly storage cost estimate for the disks
     that are attached to this machine as a group, for a 31-day month.
    :vartype monthly_storage_cost: float
    :ivar disks: Dictionary of disks attached to the machine. Key is ID of
     disk. Value is a disk object.
    :vartype disks: dict[str, ~migrate.models.AssessedDisk]
    :ivar network_adapters: Dictionary of network adapters attached to the
     machine. Key is name of the adapter. Value is a network adapter object.
    :vartype network_adapters: dict[str,
     ~migrate.models.AssessedNetworkAdapter]
    :ivar recommended_size: Recommended Azure size for this machine. Possible
     values include: 'Unknown', 'Basic_A0', 'Basic_A1', 'Basic_A2', 'Basic_A3',
     'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
     'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
     'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
     'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2', 'Standard_A2m_v2',
     'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1', 'Standard_D2',
     'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
     'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
     'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
     'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2',
     'Standard_D15_v2', 'Standard_DS1', 'Standard_DS2', 'Standard_DS3',
     'Standard_DS4', 'Standard_DS11', 'Standard_DS12', 'Standard_DS13',
     'Standard_DS14', 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2',
     'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_DS11_v2',
     'Standard_DS12_v2', 'Standard_DS13_v2', 'Standard_DS14_v2',
     'Standard_DS15_v2', 'Standard_F1', 'Standard_F2', 'Standard_F4',
     'Standard_F8', 'Standard_F16', 'Standard_F1s', 'Standard_F2s',
     'Standard_F4s', 'Standard_F8s', 'Standard_F16s', 'Standard_G1',
     'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
     'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
     'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
     'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
     'Standard_L8s', 'Standard_L16s', 'Standard_L32s'
    :vartype recommended_size: str or ~migrate.models.AzureVmSize
    :ivar number_of_cores_for_recommended_size: Number of CPU cores in the
     Recommended Azure VM Size.
    :vartype number_of_cores_for_recommended_size: int
    :ivar megabytes_of_memory_for_recommended_size: Megabytes of memory in the
     Recommended Azure VM Size.
    :vartype megabytes_of_memory_for_recommended_size: float
    :ivar monthly_compute_cost_for_recommended_size: Compute Cost for a 31-day
     month, if the machine is migrated to Azure with the Recommended Size.
    :vartype monthly_compute_cost_for_recommended_size: float
    :ivar percentage_cores_utilization: Utilization percentage of the
     processor core as observed in the private data center, in the Time Range
     selected on Assessment, reported as the Percentile value based on the
     percentile number selected in assessment.
    :vartype percentage_cores_utilization: float
    :ivar percentage_memory_utilization: Utilization percentage of the memory
     as observed in the private data center, in the Time Range selected on
     Assessment, reported as the Percentile value based on the percentile
     number selected in assessment.
    :vartype percentage_memory_utilization: float
    :ivar percentage_cores_utilization_data_points_expected: Expected data
     points for percentage of cores utilization.
    :vartype percentage_cores_utilization_data_points_expected: int
    :ivar percentage_cores_utilization_data_points_received: Received data
     points for percentage of cores utilization.
    :vartype percentage_cores_utilization_data_points_received: int
    :ivar percentage_memory_utilization_data_points_expected: Expected data
     points for percentage of memory utilization.
    :vartype percentage_memory_utilization_data_points_expected: int
    :ivar percentage_memory_utilization_data_points_received: Received data
     points for percentage of memory utilization.
    :vartype percentage_memory_utilization_data_points_received: int
    :ivar suitability: Whether machine is suitable for migration to Azure.
     Possible values include: 'Unknown', 'NotSuitable', 'Suitable',
     'ConditionallySuitable', 'ReadinessUnknown'
    :vartype suitability: str or ~migrate.models.CloudSuitability
    :ivar suitability_explanation: If machine is not ready to be migrated,
     this explains the reasons and mitigation steps. Possible values include:
     'Unknown', 'NotApplicable',
     'GuestOperatingSystemArchitectureNotSupported',
     'GuestOperatingSystemNotSupported', 'BootTypeNotSupported',
     'MoreDisksThanSupported', 'NoSuitableVmSizeFound',
     'OneOrMoreDisksNotSuitable', 'OneOrMoreAdaptersNotSuitable',
     'InternalErrorOccuredDuringComputeEvaluation',
     'InternalErrorOccuredDuringStorageEvaluation',
     'InternalErrorOccuredDuringNetworkEvaluation',
     'NoVmSizeSupportsStoragePerformance',
     'NoVmSizeSupportsNetworkPerformance', 'NoVmSizeForSelectedPricingTier',
     'NoVmSizeForSelectedAzureLocation', 'CheckRedHatLinuxVersion',
     'CheckOpenSuseLinuxVersion', 'CheckWindowsServer2008R2Version',
     'CheckCentOsVersion', 'CheckDebianLinuxVersion', 'CheckSuseLinuxVersion',
     'CheckOracleLinuxVersion', 'CheckUbuntuLinuxVersion',
     'CheckCoreOsLinuxVersion', 'WindowsServerVersionConditionallySupported',
     'NoGuestOperatingSystemConditionallySupported',
     'WindowsClientVersionsConditionallySupported', 'BootTypeUnknown',
     'GuestOperatingSystemUnknown', 'WindowsServerVersionsSupportedWithCaveat',
     'WindowsOSNoLongerUnderMSSupport',
     'EndorsedWithConditionsLinuxDistributions',
     'UnendorsedLinuxDistributions', 'NoVmSizeForStandardPricingTier',
     'NoVmSizeForBasicPricingTier'
    :vartype suitability_explanation: str or
     ~migrate.models.AzureVmSuitabilityExplanation
    :ivar created_timestamp: Time when this machine was created. Date-Time
     represented in ISO-8601 format.
    :vartype created_timestamp: datetime
    :ivar updated_timestamp: Time when this machine was last updated.
     Date-Time represented in ISO-8601 format.
    :vartype updated_timestamp: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'groups': {'readonly': True},
        'discovered_timestamp': {'readonly': True},
        'boot_type': {'readonly': True},
        'datacenter_container': {'readonly': True},
        'datacenter_management_server': {'readonly': True},
        'datacenter_machine_id': {'readonly': True},
        'datacenter_management_server_id': {'readonly': True},
        'description': {'readonly': True},
        'display_name': {'readonly': True},
        'megabytes_of_memory': {'readonly': True},
        'number_of_cores': {'readonly': True},
        'operating_system': {'readonly': True},
        'monthly_bandwidth_cost': {'readonly': True},
        'monthly_storage_cost': {'readonly': True},
        'disks': {'readonly': True},
        'network_adapters': {'readonly': True},
        'recommended_size': {'readonly': True},
        'number_of_cores_for_recommended_size': {'readonly': True},
        'megabytes_of_memory_for_recommended_size': {'readonly': True},
        'monthly_compute_cost_for_recommended_size': {'readonly': True},
        'percentage_cores_utilization': {'readonly': True},
        'percentage_memory_utilization': {'readonly': True},
        'percentage_cores_utilization_data_points_expected': {'readonly': True},
        'percentage_cores_utilization_data_points_received': {'readonly': True},
        'percentage_memory_utilization_data_points_expected': {'readonly': True},
        'percentage_memory_utilization_data_points_received': {'readonly': True},
        'suitability': {'readonly': True},
        'suitability_explanation': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'groups': {'key': 'properties.groups', 'type': '[str]'},
        'discovered_timestamp': {'key': 'properties.discoveredTimestamp', 'type': 'iso-8601'},
        'boot_type': {'key': 'properties.bootType', 'type': 'str'},
        'datacenter_container': {'key': 'properties.datacenterContainer', 'type': 'str'},
        'datacenter_management_server': {'key': 'properties.datacenterManagementServer', 'type': 'str'},
        'datacenter_machine_id': {'key': 'properties.datacenterMachineId', 'type': 'str'},
        'datacenter_management_server_id': {'key': 'properties.datacenterManagementServerId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'megabytes_of_memory': {'key': 'properties.megabytesOfMemory', 'type': 'float'},
        'number_of_cores': {'key': 'properties.numberOfCores', 'type': 'int'},
        'operating_system': {'key': 'properties.operatingSystem', 'type': 'str'},
        'monthly_bandwidth_cost': {'key': 'properties.monthlyBandwidthCost', 'type': 'float'},
        'monthly_storage_cost': {'key': 'properties.monthlyStorageCost', 'type': 'float'},
        'disks': {'key': 'properties.disks', 'type': '{AssessedDisk}'},
        'network_adapters': {'key': 'properties.networkAdapters', 'type': '{AssessedNetworkAdapter}'},
        'recommended_size': {'key': 'properties.recommendedSize', 'type': 'str'},
        'number_of_cores_for_recommended_size': {'key': 'properties.numberOfCoresForRecommendedSize', 'type': 'int'},
        'megabytes_of_memory_for_recommended_size': {'key': 'properties.megabytesOfMemoryForRecommendedSize', 'type': 'float'},
        'monthly_compute_cost_for_recommended_size': {'key': 'properties.monthlyComputeCostForRecommendedSize', 'type': 'float'},
        'percentage_cores_utilization': {'key': 'properties.percentageCoresUtilization', 'type': 'float'},
        'percentage_memory_utilization': {'key': 'properties.percentageMemoryUtilization', 'type': 'float'},
        'percentage_cores_utilization_data_points_expected': {'key': 'properties.percentageCoresUtilizationDataPointsExpected', 'type': 'int'},
        'percentage_cores_utilization_data_points_received': {'key': 'properties.percentageCoresUtilizationDataPointsReceived', 'type': 'int'},
        'percentage_memory_utilization_data_points_expected': {'key': 'properties.percentageMemoryUtilizationDataPointsExpected', 'type': 'int'},
        'percentage_memory_utilization_data_points_received': {'key': 'properties.percentageMemoryUtilizationDataPointsReceived', 'type': 'int'},
        'suitability': {'key': 'properties.suitability', 'type': 'str'},
        'suitability_explanation': {'key': 'properties.suitabilityExplanation', 'type': 'str'},
        'created_timestamp': {'key': 'properties.createdTimestamp', 'type': 'iso-8601'},
        'updated_timestamp': {'key': 'properties.updatedTimestamp', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(AssessedMachine, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.e_tag = kwargs.get('e_tag', None)
        self.type = None
        self.groups = None
        self.discovered_timestamp = None
        self.boot_type = None
        self.datacenter_container = None
        self.datacenter_management_server = None
        self.datacenter_machine_id = None
        self.datacenter_management_server_id = None
        self.description = None
        self.display_name = None
        self.megabytes_of_memory = None
        self.number_of_cores = None
        self.operating_system = None
        self.monthly_bandwidth_cost = None
        self.monthly_storage_cost = None
        self.disks = None
        self.network_adapters = None
        self.recommended_size = None
        self.number_of_cores_for_recommended_size = None
        self.megabytes_of_memory_for_recommended_size = None
        self.monthly_compute_cost_for_recommended_size = None
        self.percentage_cores_utilization = None
        self.percentage_memory_utilization = None
        self.percentage_cores_utilization_data_points_expected = None
        self.percentage_cores_utilization_data_points_received = None
        self.percentage_memory_utilization_data_points_expected = None
        self.percentage_memory_utilization_data_points_received = None
        self.suitability = None
        self.suitability_explanation = None
        self.created_timestamp = None
        self.updated_timestamp = None


class AssessedMachineResultList(Model):
    """List of assessed machines.

    :param value: List of assessed machines.
    :type value: list[~migrate.models.AssessedMachine]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AssessedMachine]'},
    }

    def __init__(self, **kwargs):
        super(AssessedMachineResultList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class AssessedNetworkAdapter(Model):
    """A network adapter assessed for an assessment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar mac_address: MAC Address of the network adapter.
    :vartype mac_address: str
    :ivar ip_addresses: List of IP Addresses on the network adapter.
    :vartype ip_addresses: list[str]
    :ivar monthly_bandwidth_costs: Monthly cost estimate for network bandwidth
     used by this network adapter.
    :vartype monthly_bandwidth_costs: float
    :ivar megabytes_per_second_received: Adapter throughput for incoming
     traffic in MegaBytes per second.
    :vartype megabytes_per_second_received: float
    :ivar megabytes_per_second_received_data_points_expected: Expected data
     points for incoming traffic in MegaBytes per second.
    :vartype megabytes_per_second_received_data_points_expected: int
    :ivar megabytes_per_second_of_read_data_points_received: Received data
     points for incoming traffic in MegaBytes per second.
    :vartype megabytes_per_second_of_read_data_points_received: int
    :ivar megabytes_per_second_transmitted: Adapter throughput for outgoing
     traffic in MegaBytes per second.
    :vartype megabytes_per_second_transmitted: float
    :ivar megabytes_per_second_transmitted_data_points_expected: Expected data
     points for outgoing traffic in MegaBytes per second.
    :vartype megabytes_per_second_transmitted_data_points_expected: int
    :ivar megabytes_per_second_transmitted_data_points_received: Received data
     points for outgoing traffic in MegaBytes per second.
    :vartype megabytes_per_second_transmitted_data_points_received: int
    :param net_gigabytes_transmitted_per_month: Gigabytes transmitted through
     this adapter each month.
    :type net_gigabytes_transmitted_per_month: float
    :ivar suitability: Whether this adapter is suitable for Azure. Possible
     values include: 'Unknown', 'NotSuitable', 'Suitable',
     'ConditionallySuitable', 'ReadinessUnknown'
    :vartype suitability: str or ~migrate.models.CloudSuitability
    :ivar suitability_explanation: If network adapter is suitable, this
     explains the reasons and mitigation steps. Possible values include:
     'Unknown', 'NotApplicable', 'InternalErrorOccured'
    :vartype suitability_explanation: str or
     ~migrate.models.AzureNetworkAdapterSuitabilityExplanation
    """

    _validation = {
        'mac_address': {'readonly': True},
        'ip_addresses': {'readonly': True},
        'monthly_bandwidth_costs': {'readonly': True},
        'megabytes_per_second_received': {'readonly': True},
        'megabytes_per_second_received_data_points_expected': {'readonly': True},
        'megabytes_per_second_of_read_data_points_received': {'readonly': True},
        'megabytes_per_second_transmitted': {'readonly': True},
        'megabytes_per_second_transmitted_data_points_expected': {'readonly': True},
        'megabytes_per_second_transmitted_data_points_received': {'readonly': True},
        'suitability': {'readonly': True},
        'suitability_explanation': {'readonly': True},
    }

    _attribute_map = {
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'monthly_bandwidth_costs': {'key': 'monthlyBandwidthCosts', 'type': 'float'},
        'megabytes_per_second_received': {'key': 'megabytesPerSecondReceived', 'type': 'float'},
        'megabytes_per_second_received_data_points_expected': {'key': 'megabytesPerSecondReceivedDataPointsExpected', 'type': 'int'},
        'megabytes_per_second_of_read_data_points_received': {'key': 'megabytesPerSecondOfReadDataPointsReceived', 'type': 'int'},
        'megabytes_per_second_transmitted': {'key': 'megabytesPerSecondTransmitted', 'type': 'float'},
        'megabytes_per_second_transmitted_data_points_expected': {'key': 'megabytesPerSecondTransmittedDataPointsExpected', 'type': 'int'},
        'megabytes_per_second_transmitted_data_points_received': {'key': 'megabytesPerSecondTransmittedDataPointsReceived', 'type': 'int'},
        'net_gigabytes_transmitted_per_month': {'key': 'netGigabytesTransmittedPerMonth', 'type': 'float'},
        'suitability': {'key': 'suitability', 'type': 'str'},
        'suitability_explanation': {'key': 'suitabilityExplanation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AssessedNetworkAdapter, self).__init__(**kwargs)
        self.mac_address = None
        self.ip_addresses = None
        self.monthly_bandwidth_costs = None
        self.megabytes_per_second_received = None
        self.megabytes_per_second_received_data_points_expected = None
        self.megabytes_per_second_of_read_data_points_received = None
        self.megabytes_per_second_transmitted = None
        self.megabytes_per_second_transmitted_data_points_expected = None
        self.megabytes_per_second_transmitted_data_points_received = None
        self.net_gigabytes_transmitted_per_month = kwargs.get('net_gigabytes_transmitted_per_month', None)
        self.suitability = None
        self.suitability_explanation = None


class Assessment(Model):
    """An assessment created for a group in the Migration project.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Path reference to this assessment.
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessment/{assessmentName}
    :vartype id: str
    :ivar name: Unique name of an assessment.
    :vartype name: str
    :param e_tag: For optimistic concurrency control.
    :type e_tag: str
    :ivar type: Type of the object =
     [Microsoft.Migrate/projects/groups/assessments].
    :vartype type: str
    :param azure_location: Required. Target Azure location for which the
     machines should be assessed. These enums are the same as used by Compute
     API. Possible values include: 'Unknown', 'EastAsia', 'SoutheastAsia',
     'AustraliaEast', 'AustraliaSoutheast', 'BrazilSouth', 'CanadaCentral',
     'CanadaEast', 'WestEurope', 'NorthEurope', 'CentralIndia', 'SouthIndia',
     'WestIndia', 'JapanEast', 'JapanWest', 'KoreaCentral', 'KoreaSouth',
     'UkWest', 'UkSouth', 'NorthCentralUs', 'EastUs', 'WestUs2',
     'SouthCentralUs', 'CentralUs', 'EastUs2', 'WestUs', 'WestCentralUs',
     'GermanyCentral', 'GermanyNortheast', 'ChinaNorth', 'ChinaEast'
    :type azure_location: str or ~migrate.models.AzureLocation
    :param azure_offer_code: Required. Offer code according to which cost
     estimation is done. Possible values include: 'Unknown', 'MSAZR0003P',
     'MSAZR0044P', 'MSAZR0059P', 'MSAZR0060P', 'MSAZR0062P', 'MSAZR0063P',
     'MSAZR0064P', 'MSAZR0029P', 'MSAZR0022P', 'MSAZR0023P', 'MSAZR0148P',
     'MSAZR0025P', 'MSAZR0036P', 'MSAZR0120P', 'MSAZR0121P', 'MSAZR0122P',
     'MSAZR0123P', 'MSAZR0124P', 'MSAZR0125P', 'MSAZR0126P', 'MSAZR0127P',
     'MSAZR0128P', 'MSAZR0129P', 'MSAZR0130P', 'MSAZR0111P', 'MSAZR0144P',
     'MSAZR0149P', 'MSMCAZR0044P', 'MSMCAZR0059P', 'MSMCAZR0060P',
     'MSMCAZR0063P', 'MSMCAZR0120P', 'MSMCAZR0121P', 'MSMCAZR0125P',
     'MSMCAZR0128P', 'MSAZRDE0003P', 'MSAZRDE0044P'
    :type azure_offer_code: str or ~migrate.models.AzureOfferCode
    :param azure_pricing_tier: Required. Pricing tier for Size evaluation.
     Possible values include: 'Standard', 'Basic'
    :type azure_pricing_tier: str or ~migrate.models.AzurePricingTier
    :param azure_storage_redundancy: Required. Storage Redundancy type offered
     by Azure. Possible values include: 'Unknown', 'LocallyRedundant',
     'ZoneRedundant', 'GeoRedundant', 'ReadAccessGeoRedundant'
    :type azure_storage_redundancy: str or
     ~migrate.models.AzureStorageRedundancy
    :param scaling_factor: Required. Scaling factor used over utilization data
     to add a performance buffer for new machines to be created in Azure. Min
     Value = 1.0, Max value = 1.9, Default = 1.3.
    :type scaling_factor: float
    :param percentile: Required. Percentile of performance data used to
     recommend Azure size. Possible values include: 'Percentile50',
     'Percentile90', 'Percentile95', 'Percentile99'
    :type percentile: str or ~migrate.models.Percentile
    :param time_range: Required. Time range of performance data used to
     recommend a size. Possible values include: 'Day', 'Week', 'Month'
    :type time_range: str or ~migrate.models.TimeRange
    :param stage: Required. User configurable setting that describes the
     status of the assessment. Possible values include: 'InProgress',
     'UnderReview', 'Approved'
    :type stage: str or ~migrate.models.AssessmentStage
    :param currency: Required. Currency to report prices in. Possible values
     include: 'Unknown', 'USD', 'DKK', 'CAD', 'IDR', 'JPY', 'KRW', 'NZD',
     'NOK', 'RUB', 'SAR', 'ZAR', 'SEK', 'TRY', 'GBP', 'MXN', 'MYR', 'INR',
     'HKD', 'BRL', 'TWD', 'EUR', 'CHF', 'ARS', 'AUD', 'CNY'
    :type currency: str or ~migrate.models.Currency
    :param azure_hybrid_use_benefit: Required. AHUB discount on windows
     virtual machines. Possible values include: 'Unknown', 'Yes', 'No'
    :type azure_hybrid_use_benefit: str or
     ~migrate.models.AzureHybridUseBenefit
    :param discount_percentage: Required. Custom discount percentage to be
     applied on final costs. Can be in the range [0, 100].
    :type discount_percentage: float
    :ivar confidence_rating_in_percentage: Confidence rating percentage for
     assessment. Can be in the range [0, 100].
    :vartype confidence_rating_in_percentage: float
    :param sizing_criterion: Required. Assessment sizing criterion. Possible
     values include: 'PerformanceBased', 'AsOnPremises'
    :type sizing_criterion: str or ~migrate.models.AssessmentSizingCriterion
    :ivar prices_timestamp: Time when the Azure Prices were queried. Date-Time
     represented in ISO-8601 format.
    :vartype prices_timestamp: datetime
    :ivar created_timestamp: Time when this project was created. Date-Time
     represented in ISO-8601 format.
    :vartype created_timestamp: datetime
    :ivar updated_timestamp: Time when this project was last updated.
     Date-Time represented in ISO-8601 format.
    :vartype updated_timestamp: datetime
    :ivar monthly_compute_cost: Monthly compute cost estimate for the machines
     that are part of this assessment as a group, for a 31-day month.
    :vartype monthly_compute_cost: float
    :ivar monthly_bandwidth_cost: Monthly network cost estimate for the
     machines that are part of this assessment as a group, for a 31-day month.
    :vartype monthly_bandwidth_cost: float
    :ivar monthly_storage_cost: Monthly storage cost estimate for the machines
     that are part of this assessment as a group, for a 31-day month.
    :vartype monthly_storage_cost: float
    :ivar status: Whether the assessment has been created and is valid.
     Possible values include: 'Created', 'Updated', 'Running', 'Completed',
     'Invalid'
    :vartype status: str or ~migrate.models.AssessmentStatus
    :ivar number_of_machines: Number of assessed machines part of this
     assessment.
    :vartype number_of_machines: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'azure_location': {'required': True},
        'azure_offer_code': {'required': True},
        'azure_pricing_tier': {'required': True},
        'azure_storage_redundancy': {'required': True},
        'scaling_factor': {'required': True},
        'percentile': {'required': True},
        'time_range': {'required': True},
        'stage': {'required': True},
        'currency': {'required': True},
        'azure_hybrid_use_benefit': {'required': True},
        'discount_percentage': {'required': True},
        'confidence_rating_in_percentage': {'readonly': True},
        'sizing_criterion': {'required': True},
        'prices_timestamp': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'monthly_compute_cost': {'readonly': True},
        'monthly_bandwidth_cost': {'readonly': True},
        'monthly_storage_cost': {'readonly': True},
        'status': {'readonly': True},
        'number_of_machines': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'azure_location': {'key': 'properties.azureLocation', 'type': 'str'},
        'azure_offer_code': {'key': 'properties.azureOfferCode', 'type': 'str'},
        'azure_pricing_tier': {'key': 'properties.azurePricingTier', 'type': 'str'},
        'azure_storage_redundancy': {'key': 'properties.azureStorageRedundancy', 'type': 'str'},
        'scaling_factor': {'key': 'properties.scalingFactor', 'type': 'float'},
        'percentile': {'key': 'properties.percentile', 'type': 'str'},
        'time_range': {'key': 'properties.timeRange', 'type': 'str'},
        'stage': {'key': 'properties.stage', 'type': 'str'},
        'currency': {'key': 'properties.currency', 'type': 'str'},
        'azure_hybrid_use_benefit': {'key': 'properties.azureHybridUseBenefit', 'type': 'str'},
        'discount_percentage': {'key': 'properties.discountPercentage', 'type': 'float'},
        'confidence_rating_in_percentage': {'key': 'properties.confidenceRatingInPercentage', 'type': 'float'},
        'sizing_criterion': {'key': 'properties.sizingCriterion', 'type': 'str'},
        'prices_timestamp': {'key': 'properties.pricesTimestamp', 'type': 'iso-8601'},
        'created_timestamp': {'key': 'properties.createdTimestamp', 'type': 'iso-8601'},
        'updated_timestamp': {'key': 'properties.updatedTimestamp', 'type': 'iso-8601'},
        'monthly_compute_cost': {'key': 'properties.monthlyComputeCost', 'type': 'float'},
        'monthly_bandwidth_cost': {'key': 'properties.monthlyBandwidthCost', 'type': 'float'},
        'monthly_storage_cost': {'key': 'properties.monthlyStorageCost', 'type': 'float'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'number_of_machines': {'key': 'properties.numberOfMachines', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(Assessment, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.e_tag = kwargs.get('e_tag', None)
        self.type = None
        self.azure_location = kwargs.get('azure_location', None)
        self.azure_offer_code = kwargs.get('azure_offer_code', None)
        self.azure_pricing_tier = kwargs.get('azure_pricing_tier', None)
        self.azure_storage_redundancy = kwargs.get('azure_storage_redundancy', None)
        self.scaling_factor = kwargs.get('scaling_factor', None)
        self.percentile = kwargs.get('percentile', None)
        self.time_range = kwargs.get('time_range', None)
        self.stage = kwargs.get('stage', None)
        self.currency = kwargs.get('currency', None)
        self.azure_hybrid_use_benefit = kwargs.get('azure_hybrid_use_benefit', None)
        self.discount_percentage = kwargs.get('discount_percentage', None)
        self.confidence_rating_in_percentage = None
        self.sizing_criterion = kwargs.get('sizing_criterion', None)
        self.prices_timestamp = None
        self.created_timestamp = None
        self.updated_timestamp = None
        self.monthly_compute_cost = None
        self.monthly_bandwidth_cost = None
        self.monthly_storage_cost = None
        self.status = None
        self.number_of_machines = None


class AssessmentOptionsResultList(Model):
    """List of assessment options.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar vm_families: Dictionary of VM families grouped by vm family name
     describing the targeted azure locations of VM family and the category of
     the family.
    :vartype vm_families: list[~migrate.models.VmFamily]
    :ivar reserved_instance_vm_families: List of supported VM Families.
    :vartype reserved_instance_vm_families: list[str]
    """

    _validation = {
        'vm_families': {'readonly': True},
        'reserved_instance_vm_families': {'readonly': True},
    }

    _attribute_map = {
        'vm_families': {'key': 'vmFamilies', 'type': '[VmFamily]'},
        'reserved_instance_vm_families': {'key': 'reservedInstanceVmFamilies', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(AssessmentOptionsResultList, self).__init__(**kwargs)
        self.vm_families = None
        self.reserved_instance_vm_families = None


class AssessmentResultList(Model):
    """List of assessments.

    :param value: List of assessments.
    :type value: list[~migrate.models.Assessment]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Assessment]'},
    }

    def __init__(self, **kwargs):
        super(AssessmentResultList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class CheckNameAvailabilityParameters(Model):
    """Parameters for a check name availability request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name to check for availability
    :type name: str
    :ivar type: Required. The resource type. Must be set to
     Microsoft.Migrate/projects. Default value: "Microsoft.Migrate/projects" .
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.Migrate/projects"

    def __init__(self, **kwargs):
        super(CheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class CheckNameAvailabilityResult(Model):
    """The CheckNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name_available: Gets a boolean value that indicates whether the name
     is available for you to use. If true, the name is available. If false, the
     name has already been taken or invalid and cannot be used.
    :vartype name_available: bool
    :ivar reason: Gets the reason that a project name could not be used. The
     Reason element is only returned if NameAvailable is false. Possible values
     include: 'Available', 'Invalid', 'AlreadyExists'
    :vartype reason: str or ~migrate.models.NameAvailabilityReason
    :ivar message: Gets an error message explaining the Reason value in more
     detail.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'NameAvailabilityReason'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class CloudError(Model):
    """An error response from the Azure Migrate service.

    :param error:
    :type error: ~migrate.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, **kwargs):
        super(CloudError, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """An error response from the Azure Migrate service.

    :param code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable
     for display in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name
     of the property in error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~migrate.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, **kwargs):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class Disk(Model):
    """A disk discovered on a machine.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar gigabytes_allocated: Gigabytes of storage provisioned for this disk.
    :vartype gigabytes_allocated: float
    :ivar gigabytes_consumed: Gigabytes of storage consumed by this disk.
    :vartype gigabytes_consumed: float
    """

    _validation = {
        'gigabytes_allocated': {'readonly': True},
        'gigabytes_consumed': {'readonly': True},
    }

    _attribute_map = {
        'gigabytes_allocated': {'key': 'gigabytesAllocated', 'type': 'float'},
        'gigabytes_consumed': {'key': 'gigabytesConsumed', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(Disk, self).__init__(**kwargs)
        self.gigabytes_allocated = None
        self.gigabytes_consumed = None


class DownloadUrl(Model):
    """Download URL for assessment report.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar assessment_report_url: Hyperlink to download report.
    :vartype assessment_report_url: str
    :ivar expiration_time: Expiry date of download url.
    :vartype expiration_time: datetime
    """

    _validation = {
        'assessment_report_url': {'readonly': True},
        'expiration_time': {'readonly': True},
    }

    _attribute_map = {
        'assessment_report_url': {'key': 'assessmentReportUrl', 'type': 'str'},
        'expiration_time': {'key': 'expirationTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(DownloadUrl, self).__init__(**kwargs)
        self.assessment_report_url = None
        self.expiration_time = None


class Group(Model):
    """A group created in a Migration project.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Path reference to this group.
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}
    :vartype id: str
    :ivar name: Name of the group.
    :vartype name: str
    :param e_tag: For optimistic concurrency control.
    :type e_tag: str
    :ivar type: Type of the object = [Microsoft.Migrate/projects/groups].
    :vartype type: str
    :param machines: Required. List of machine names that are part of this
     group.
    :type machines: list[str]
    :ivar assessments: List of References to Assessments created on this
     group.
    :vartype assessments: list[str]
    :ivar created_timestamp: Time when this project was created. Date-Time
     represented in ISO-8601 format.
    :vartype created_timestamp: datetime
    :ivar updated_timestamp: Time when this project was last updated.
     Date-Time represented in ISO-8601 format.
    :vartype updated_timestamp: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'machines': {'required': True},
        'assessments': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'machines': {'key': 'properties.machines', 'type': '[str]'},
        'assessments': {'key': 'properties.assessments', 'type': '[str]'},
        'created_timestamp': {'key': 'properties.createdTimestamp', 'type': 'iso-8601'},
        'updated_timestamp': {'key': 'properties.updatedTimestamp', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(Group, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.e_tag = kwargs.get('e_tag', None)
        self.type = None
        self.machines = kwargs.get('machines', None)
        self.assessments = None
        self.created_timestamp = None
        self.updated_timestamp = None


class GroupResultList(Model):
    """List of groups.

    :param value: List of groups.
    :type value: list[~migrate.models.Group]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Group]'},
    }

    def __init__(self, **kwargs):
        super(GroupResultList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class Machine(Model):
    """A machine in a migration project.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Path reference to this machine.
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/machines/{machineName}
    :vartype id: str
    :ivar name: Name of the machine. It is a GUID which is unique identifier
     of machine in private data center. For user-readable name, we have a
     displayName property on this machine.
    :vartype name: str
    :param e_tag: For optimistic concurrency control.
    :type e_tag: str
    :ivar type: Type of the object = [Microsoft.Migrate/projects/machines].
    :vartype type: str
    :ivar boot_type: Boot type of the machine. Possible values include:
     'Unknown', 'EFI', 'BIOS'
    :vartype boot_type: str or ~migrate.models.MachineBootType
    :ivar datacenter_container: Container defined in the management solution
     that this machine is part of in the datacenter.
    :vartype datacenter_container: str
    :ivar datacenter_management_server: Name of the server hosting the
     datacenter management solution.
    :vartype datacenter_management_server: str
    :ivar datacenter_machine_id: ID of the machine as tracked by the
     datacenter management solution.
    :vartype datacenter_machine_id: str
    :ivar datacenter_management_server_id: ID of the server hosting the
     datacenter management solution.
    :vartype datacenter_management_server_id: str
    :ivar description: Description of the machine
    :vartype description: str
    :ivar display_name: User readable name of the machine as defined by the
     user in their private datacenter.
    :vartype display_name: str
    :ivar megabytes_of_memory: Memory in Megabytes.
    :vartype megabytes_of_memory: float
    :ivar number_of_cores: Processor count.
    :vartype number_of_cores: int
    :ivar operating_system: Operating System of the machine.
    :vartype operating_system: str
    :ivar groups: List of references to the groups that the machine is member
     of.
    :vartype groups: list[str]
    :ivar created_timestamp: Time when this machine was created. Date-Time
     represented in ISO-8601 format.
    :vartype created_timestamp: datetime
    :ivar updated_timestamp: Time when this machine was last updated.
     Date-Time represented in ISO-8601 format.
    :vartype updated_timestamp: datetime
    :ivar discovered_timestamp: Time when this machine was discovered by Azure
     Migrate agent. Date-Time represented in ISO-8601 format.
    :vartype discovered_timestamp: datetime
    :ivar disks: Dictionary of disks attached to the machine. Key is ID of
     disk. Value is a disk object
    :vartype disks: dict[str, ~migrate.models.Disk]
    :ivar network_adapters: Dictionary of network adapters attached to the
     machine. Key is ID of network adapter. Value is a network adapter object
    :vartype network_adapters: dict[str, ~migrate.models.NetworkAdapter]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'boot_type': {'readonly': True},
        'datacenter_container': {'readonly': True},
        'datacenter_management_server': {'readonly': True},
        'datacenter_machine_id': {'readonly': True},
        'datacenter_management_server_id': {'readonly': True},
        'description': {'readonly': True},
        'display_name': {'readonly': True},
        'megabytes_of_memory': {'readonly': True},
        'number_of_cores': {'readonly': True},
        'operating_system': {'readonly': True},
        'groups': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'discovered_timestamp': {'readonly': True},
        'disks': {'readonly': True},
        'network_adapters': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'boot_type': {'key': 'properties.bootType', 'type': 'str'},
        'datacenter_container': {'key': 'properties.datacenterContainer', 'type': 'str'},
        'datacenter_management_server': {'key': 'properties.datacenterManagementServer', 'type': 'str'},
        'datacenter_machine_id': {'key': 'properties.datacenterMachineId', 'type': 'str'},
        'datacenter_management_server_id': {'key': 'properties.datacenterManagementServerId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'megabytes_of_memory': {'key': 'properties.megabytesOfMemory', 'type': 'float'},
        'number_of_cores': {'key': 'properties.numberOfCores', 'type': 'int'},
        'operating_system': {'key': 'properties.operatingSystem', 'type': 'str'},
        'groups': {'key': 'properties.groups', 'type': '[str]'},
        'created_timestamp': {'key': 'properties.createdTimestamp', 'type': 'iso-8601'},
        'updated_timestamp': {'key': 'properties.updatedTimestamp', 'type': 'iso-8601'},
        'discovered_timestamp': {'key': 'properties.discoveredTimestamp', 'type': 'iso-8601'},
        'disks': {'key': 'properties.disks', 'type': '{Disk}'},
        'network_adapters': {'key': 'properties.networkAdapters', 'type': '{NetworkAdapter}'},
    }

    def __init__(self, **kwargs):
        super(Machine, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.e_tag = kwargs.get('e_tag', None)
        self.type = None
        self.boot_type = None
        self.datacenter_container = None
        self.datacenter_management_server = None
        self.datacenter_machine_id = None
        self.datacenter_management_server_id = None
        self.description = None
        self.display_name = None
        self.megabytes_of_memory = None
        self.number_of_cores = None
        self.operating_system = None
        self.groups = None
        self.created_timestamp = None
        self.updated_timestamp = None
        self.discovered_timestamp = None
        self.disks = None
        self.network_adapters = None


class MachineResultList(Model):
    """List of machines.

    :param value: List of machines.
    :type value: list[~migrate.models.Machine]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Machine]'},
    }

    def __init__(self, **kwargs):
        super(MachineResultList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class NetworkAdapter(Model):
    """A network adapter discovered on a machine.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar mac_address: MAC Address of the network adapter.
    :vartype mac_address: str
    :ivar ip_addresses: List of IP Addresses on the network adapter.
    :vartype ip_addresses: list[str]
    """

    _validation = {
        'mac_address': {'readonly': True},
        'ip_addresses': {'readonly': True},
    }

    _attribute_map = {
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(NetworkAdapter, self).__init__(**kwargs)
        self.mac_address = None
        self.ip_addresses = None


class Operation(Model):
    """A REST API operation supported by the provider.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the operation.
    :vartype name: str
    :param display: Displayable properties of the operation.
    :type display: ~migrate.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    """

    _validation = {
        'name': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = kwargs.get('display', None)
        self.origin = None


class OperationDisplay(Model):
    """Displayable properties of the operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provider: Provider of the operation.
    :vartype provider: str
    :ivar resource: Resource operated on by the operation.
    :vartype resource: str
    :ivar operation: Operation Type.
    :vartype operation: str
    :ivar description: Description of the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationResultList(Model):
    """List of API operations.

    :param value: List of operations.
    :type value: list[~migrate.models.Operation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(self, **kwargs):
        super(OperationResultList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class Project(Model):
    """Azure Migrate Project.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Path reference to this project
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}
    :vartype id: str
    :ivar name: Name of the project.
    :vartype name: str
    :ivar type: Type of the object = [Microsoft.Migrate/projects].
    :vartype type: str
    :param e_tag: For optimistic concurrency control.
    :type e_tag: str
    :param location: Azure location in which project is created.
    :type location: str
    :param tags: Tags provided by Azure Tagging service.
    :type tags: object
    :ivar created_timestamp: Time when this project was created. Date-Time
     represented in ISO-8601 format.
    :vartype created_timestamp: datetime
    :ivar updated_timestamp: Time when this project was last updated.
     Date-Time represented in ISO-8601 format.
    :vartype updated_timestamp: datetime
    :ivar discovery_status: Reports whether project is under discovery.
     Possible values include: 'Unknown', 'NotStarted', 'InProgress',
     'Completed'
    :vartype discovery_status: str or ~migrate.models.DiscoveryStatus
    :param customer_workspace_id: ARM ID of the Service Map workspace created
     by user.
    :type customer_workspace_id: str
    :param customer_workspace_location: Location of the Service Map workspace
     created by user.
    :type customer_workspace_location: str
    :ivar last_discovery_timestamp: Time when this project was created.
     Date-Time represented in ISO-8601 format. This value will be null until
     discovery is complete.
    :vartype last_discovery_timestamp: datetime
    :ivar last_discovery_session_id: Session id of the last discovery.
    :vartype last_discovery_session_id: str
    :ivar number_of_groups: Number of groups created in the project.
    :vartype number_of_groups: int
    :ivar number_of_machines: Number of machines in the project.
    :vartype number_of_machines: int
    :ivar number_of_assessments: Number of assessments created in the project.
    :vartype number_of_assessments: int
    :ivar last_assessment_timestamp: Time when last assessment was created.
     Date-Time represented in ISO-8601 format. This value will be null until
     assessment is created.
    :vartype last_assessment_timestamp: datetime
    :param provisioning_state: Provisioning state of the project. Possible
     values include: 'Accepted', 'Creating', 'Deleting', 'Failed', 'Moving',
     'Succeeded'
    :type provisioning_state: str or ~migrate.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'discovery_status': {'readonly': True},
        'last_discovery_timestamp': {'readonly': True},
        'last_discovery_session_id': {'readonly': True},
        'number_of_groups': {'readonly': True},
        'number_of_machines': {'readonly': True},
        'number_of_assessments': {'readonly': True},
        'last_assessment_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'created_timestamp': {'key': 'properties.createdTimestamp', 'type': 'iso-8601'},
        'updated_timestamp': {'key': 'properties.updatedTimestamp', 'type': 'iso-8601'},
        'discovery_status': {'key': 'properties.discoveryStatus', 'type': 'str'},
        'customer_workspace_id': {'key': 'properties.customerWorkspaceId', 'type': 'str'},
        'customer_workspace_location': {'key': 'properties.customerWorkspaceLocation', 'type': 'str'},
        'last_discovery_timestamp': {'key': 'properties.lastDiscoveryTimestamp', 'type': 'iso-8601'},
        'last_discovery_session_id': {'key': 'properties.lastDiscoverySessionId', 'type': 'str'},
        'number_of_groups': {'key': 'properties.numberOfGroups', 'type': 'int'},
        'number_of_machines': {'key': 'properties.numberOfMachines', 'type': 'int'},
        'number_of_assessments': {'key': 'properties.numberOfAssessments', 'type': 'int'},
        'last_assessment_timestamp': {'key': 'properties.lastAssessmentTimestamp', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Project, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.e_tag = kwargs.get('e_tag', None)
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.created_timestamp = None
        self.updated_timestamp = None
        self.discovery_status = None
        self.customer_workspace_id = kwargs.get('customer_workspace_id', None)
        self.customer_workspace_location = kwargs.get('customer_workspace_location', None)
        self.last_discovery_timestamp = None
        self.last_discovery_session_id = None
        self.number_of_groups = None
        self.number_of_machines = None
        self.number_of_assessments = None
        self.last_assessment_timestamp = None
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ProjectKey(Model):
    """ID and Key for Migration Project.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar workspace_id: ID of Migration Project.
    :vartype workspace_id: str
    :ivar workspace_key: Key of Migration Project.
    :vartype workspace_key: str
    """

    _validation = {
        'workspace_id': {'readonly': True},
        'workspace_key': {'readonly': True},
    }

    _attribute_map = {
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'workspace_key': {'key': 'workspaceKey', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProjectKey, self).__init__(**kwargs)
        self.workspace_id = None
        self.workspace_key = None


class ProjectResultList(Model):
    """List of projects.

    :param value: List of projects.
    :type value: list[~migrate.models.Project]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Project]'},
    }

    def __init__(self, **kwargs):
        super(ProjectResultList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class VmFamily(Model):
    """VM family name, the list of targeted azure locations and the category of
    the family.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar family_name: Name of the VM family.
    :vartype family_name: str
    :ivar target_locations: List of Azure regions.
    :vartype target_locations: list[str]
    :ivar category: Category of the VM family.
    :vartype category: list[str]
    """

    _validation = {
        'family_name': {'readonly': True},
        'target_locations': {'readonly': True},
        'category': {'readonly': True},
    }

    _attribute_map = {
        'family_name': {'key': 'familyName', 'type': 'str'},
        'target_locations': {'key': 'targetLocations', 'type': '[str]'},
        'category': {'key': 'category', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(VmFamily, self).__init__(**kwargs)
        self.family_name = None
        self.target_locations = None
        self.category = None
