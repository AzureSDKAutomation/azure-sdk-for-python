# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class VmDiskTypes(str, Enum):

    none = "None"
    unmanaged = "Unmanaged"


class HyperVGenerationTypes(str, Enum):

    v1 = "V1"
    v2 = "V2"


class StatusLevelTypes(str, Enum):

    info = "Info"
    warning = "Warning"
    error = "Error"


class AvailabilitySetSkuTypes(str, Enum):

    classic = "Classic"
    aligned = "Aligned"


class ProximityPlacementGroupType(str, Enum):

    standard = "Standard"
    ultra = "Ultra"


class DedicatedHostLicenseTypes(str, Enum):

    none = "None"
    windows_server_hybrid = "Windows_Server_Hybrid"
    windows_server_perpetual = "Windows_Server_Perpetual"


class SoftwareUpdateRebootBehavior(str, Enum):

    never_reboots = "NeverReboots"
    always_requires_reboot = "AlwaysRequiresReboot"
    can_request_reboot = "CanRequestReboot"


class PatchAssessmentState(str, Enum):

    installed = "Installed"
    failed = "Failed"
    excluded = "Excluded"
    not_selected = "NotSelected"
    pending = "Pending"
    available = "Available"


class PatchOperationStatus(str, Enum):

    in_progress = "InProgress"
    failed = "Failed"
    succeeded = "Succeeded"
    completed_with_warnings = "CompletedWithWarnings"


class OperatingSystemTypes(str, Enum):

    windows = "Windows"
    linux = "Linux"


class CachingTypes(str, Enum):

    none = "None"
    read_only = "ReadOnly"
    read_write = "ReadWrite"


class DiskCreateOptionTypes(str, Enum):

    from_image = "FromImage"
    empty = "Empty"
    attach = "Attach"


class StorageAccountTypes(str, Enum):

    standard_lrs = "Standard_LRS"
    premium_lrs = "Premium_LRS"
    standard_ssd_lrs = "StandardSSD_LRS"
    ultra_ssd_lrs = "UltraSSD_LRS"


class DiffDiskOptions(str, Enum):

    local = "Local"


class DiffDiskPlacement(str, Enum):

    cache_disk = "CacheDisk"
    resource_disk = "ResourceDisk"


class PassNames(str, Enum):

    oobe_system = "OobeSystem"


class ComponentNames(str, Enum):

    microsoft_windows_shell_setup = "Microsoft-Windows-Shell-Setup"


class SettingNames(str, Enum):

    auto_logon = "AutoLogon"
    first_logon_commands = "FirstLogonCommands"


class ProtocolTypes(str, Enum):

    http = "Http"
    https = "Https"


class InGuestPatchMode(str, Enum):

    manual = "Manual"
    automatic_by_os = "AutomaticByOS"
    automatic_by_platform = "AutomaticByPlatform"


class VirtualMachinePriorityTypes(str, Enum):

    regular = "Regular"
    low = "Low"
    spot = "Spot"


class VirtualMachineEvictionPolicyTypes(str, Enum):

    deallocate = "Deallocate"
    delete = "Delete"


class ResourceIdentityType(str, Enum):

    system_assigned = "SystemAssigned"
    user_assigned = "UserAssigned"
    system_assigned_user_assigned = "SystemAssigned, UserAssigned"
    none = "None"


class MaintenanceOperationResultCodeTypes(str, Enum):

    none = "None"
    retry_later = "RetryLater"
    maintenance_aborted = "MaintenanceAborted"
    maintenance_completed = "MaintenanceCompleted"


class HyperVGenerationType(str, Enum):

    v1 = "V1"
    v2 = "V2"


class RebootStatus(str, Enum):

    not_needed = "NotNeeded"
    required = "Required"
    started = "Started"
    failed = "Failed"
    completed = "Completed"


class UpgradeMode(str, Enum):

    automatic = "Automatic"
    manual = "Manual"
    rolling = "Rolling"


class VirtualMachineScaleSetScaleInRules(str, Enum):

    default = "Default"
    oldest_vm = "OldestVM"
    newest_vm = "NewestVM"


class OperatingSystemStateTypes(str, Enum):

    generalized = "Generalized"  #: Generalized image. Needs to be provisioned during deployment time.
    specialized = "Specialized"  #: Specialized image. Contains already provisioned OS Disk.


class IPVersion(str, Enum):

    ipv4 = "IPv4"
    ipv6 = "IPv6"


class OrchestrationServiceNames(str, Enum):

    automatic_repairs = "AutomaticRepairs"


class OrchestrationServiceState(str, Enum):

    not_running = "NotRunning"
    running = "Running"
    suspended = "Suspended"


class VirtualMachineScaleSetSkuScaleType(str, Enum):

    automatic = "Automatic"
    none = "None"


class UpgradeState(str, Enum):

    rolling_forward = "RollingForward"
    cancelled = "Cancelled"
    completed = "Completed"
    faulted = "Faulted"


class UpgradeOperationInvoker(str, Enum):

    unknown = "Unknown"
    user = "User"
    platform = "Platform"


class RollingUpgradeStatusCode(str, Enum):

    rolling_forward = "RollingForward"
    cancelled = "Cancelled"
    completed = "Completed"
    faulted = "Faulted"


class RollingUpgradeActionType(str, Enum):

    start = "Start"
    cancel = "Cancel"


class IntervalInMins(str, Enum):

    three_mins = "ThreeMins"
    five_mins = "FiveMins"
    thirty_mins = "ThirtyMins"
    sixty_mins = "SixtyMins"


class OrchestrationServiceStateAction(str, Enum):

    resume = "Resume"
    suspend = "Suspend"


class ExecutionState(str, Enum):

    unknown = "Unknown"
    pending = "Pending"
    running = "Running"
    failed = "Failed"
    succeeded = "Succeeded"
    timed_out = "TimedOut"
    canceled = "Canceled"


class InstanceViewTypes(str, Enum):

    instance_view = "instanceView"
