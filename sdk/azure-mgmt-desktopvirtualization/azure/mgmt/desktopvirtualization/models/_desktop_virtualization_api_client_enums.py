# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class ApplicationGroupType(str, Enum):

    remote_app = "RemoteApp"
    desktop = "Desktop"


class HostPoolType(str, Enum):

    personal = "Personal"
    pooled = "Pooled"


class PersonalDesktopAssignmentType(str, Enum):

    automatic = "Automatic"
    direct = "Direct"


class LoadBalancerType(str, Enum):

    breadth_first = "BreadthFirst"
    depth_first = "DepthFirst"
    persistent = "Persistent"


class RegistrationTokenOperation(str, Enum):

    delete = "Delete"
    none = "None"
    update = "Update"


class SSOSecretType(str, Enum):

    shared_key = "SharedKey"
    certificate = "Certificate"
    shared_key_in_key_vault = "SharedKeyInKeyVault"
    certificate_in_key_vault = "CertificateInKeyVault"


class PreferredAppGroupType(str, Enum):

    none = "None"
    desktop = "Desktop"
    rail_applications = "RailApplications"


class RemoteApplicationType(str, Enum):

    in_built = "InBuilt"
    msix_application = "MsixApplication"


class CommandLineSetting(str, Enum):

    do_not_allow = "DoNotAllow"
    allow = "Allow"
    require = "Require"


class Status(str, Enum):

    available = "Available"
    unavailable = "Unavailable"
    shutdown = "Shutdown"
    disconnected = "Disconnected"
    upgrading = "Upgrading"
    upgrade_failed = "UpgradeFailed"


class UpdateState(str, Enum):

    initial = "Initial"
    pending = "Pending"
    started = "Started"
    succeeded = "Succeeded"
    failed = "Failed"


class HealthCheckName(str, Enum):

    domain_joined_check = "DomainJoinedCheck"
    domain_trust_check = "DomainTrustCheck"
    fs_logix_health_check = "FSLogixHealthCheck"
    sx_sstack_listener_check = "SxSStackListenerCheck"
    urls_accessible_check = "UrlsAccessibleCheck"
    monitoring_agent_check = "MonitoringAgentCheck"
    domain_reachable = "DomainReachable"
    web_rtc_redirector_check = "WebRTCRedirectorCheck"
    supported_encryption_check = "SupportedEncryptionCheck"
    meta_data_service_check = "MetaDataServiceCheck"
    app_attach_health_check = "AppAttachHealthCheck"


class HealthCheckResult(str, Enum):

    unknown = "Unknown"
    health_check_succeeded = "HealthCheckSucceeded"
    health_check_failed = "HealthCheckFailed"
    session_host_shutdown = "SessionHostShutdown"


class ApplicationType(str, Enum):

    remote_app = "RemoteApp"
    desktop = "Desktop"


class SessionState(str, Enum):

    unknown = "Unknown"
    active = "Active"
    disconnected = "Disconnected"
    pending = "Pending"
    log_off = "LogOff"
    user_profile_disk_mounted = "UserProfileDiskMounted"


class SessionHostLoadBalancingAlgorithm(str, Enum):

    breadth_first = "BreadthFirst"
    depth_first = "DepthFirst"


class StopHostsWhen(str, Enum):

    zero_sessions = "ZeroSessions"
    zero_active_sessions = "ZeroActiveSessions"
