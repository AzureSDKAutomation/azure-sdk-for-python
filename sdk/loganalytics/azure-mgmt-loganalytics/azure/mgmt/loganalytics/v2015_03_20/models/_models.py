# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AvailableServiceTier(Model):
    """Service Tier details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar service_tier: The name of the Service Tier. Possible values include:
     'Free', 'Standard', 'Premium', 'PerNode', 'PerGB2018', 'Standalone',
     'CapacityReservation'
    :vartype service_tier: str or
     ~azure.mgmt.loganalytics.v2015_03_20.models.SkuNameEnum
    :ivar enabled: True if the Service Tier is enabled for the workspace.
    :vartype enabled: bool
    :ivar minimum_retention: The minimum retention for the Service Tier, in
     days.
    :vartype minimum_retention: long
    :ivar maximum_retention: The maximum retention for the Service Tier, in
     days.
    :vartype maximum_retention: long
    :ivar default_retention: The default retention for the Service Tier, in
     days.
    :vartype default_retention: long
    :ivar capacity_reservation_level: The capacity reservation level in GB per
     day. Returned for the Capacity Reservation Service Tier.
    :vartype capacity_reservation_level: long
    :ivar last_sku_update: Time when the sku was last updated for the
     workspace. Returned for the Capacity Reservation Service Tier.
    :vartype last_sku_update: datetime
    """

    _validation = {
        'service_tier': {'readonly': True},
        'enabled': {'readonly': True},
        'minimum_retention': {'readonly': True},
        'maximum_retention': {'readonly': True},
        'default_retention': {'readonly': True},
        'capacity_reservation_level': {'readonly': True},
        'last_sku_update': {'readonly': True},
    }

    _attribute_map = {
        'service_tier': {'key': 'ServiceTier', 'type': 'str'},
        'enabled': {'key': 'Enabled', 'type': 'bool'},
        'minimum_retention': {'key': 'MinimumRetention', 'type': 'long'},
        'maximum_retention': {'key': 'MaximumRetention', 'type': 'long'},
        'default_retention': {'key': 'DefaultRetention', 'type': 'long'},
        'capacity_reservation_level': {'key': 'CapacityReservationLevel', 'type': 'long'},
        'last_sku_update': {'key': 'LastSkuUpdate', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(AvailableServiceTier, self).__init__(**kwargs)
        self.service_tier = None
        self.enabled = None
        self.minimum_retention = None
        self.maximum_retention = None
        self.default_retention = None
        self.capacity_reservation_level = None
        self.last_sku_update = None


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class CoreSummary(Model):
    """The core summary of a search.

    All required parameters must be populated in order to send to Azure.

    :param status: The status of a core summary.
    :type status: str
    :param number_of_documents: Required. The number of documents of a core
     summary.
    :type number_of_documents: long
    """

    _validation = {
        'number_of_documents': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'number_of_documents': {'key': 'numberOfDocuments', 'type': 'long'},
    }

    def __init__(self, **kwargs):
        super(CoreSummary, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.number_of_documents = kwargs.get('number_of_documents', None)


class LinkTarget(Model):
    """Metadata for a workspace that isn't linked to an Azure subscription.

    :param customer_id: The GUID that uniquely identifies the workspace.
    :type customer_id: str
    :param display_name: The display name of the workspace.
    :type display_name: str
    :param workspace_name: The DNS valid workspace name.
    :type workspace_name: str
    :param location: The location of the workspace.
    :type location: str
    """

    _attribute_map = {
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'display_name': {'key': 'accountName', 'type': 'str'},
        'workspace_name': {'key': 'workspaceName', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(LinkTarget, self).__init__(**kwargs)
        self.customer_id = kwargs.get('customer_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.workspace_name = kwargs.get('workspace_name', None)
        self.location = kwargs.get('location', None)


class Operation(Model):
    """Supported operation of OperationalInsights resource provider.

    :param name: Operation name: {provider}/{resource}/{operation}
    :type name: str
    :param display: Display metadata associated with the operation.
    :type display:
     ~azure.mgmt.loganalytics.v2015_03_20.models.OperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(self, **kwargs):
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)


class OperationDisplay(Model):
    """Display metadata associated with the operation.

    :param provider: Service provider: OperationalInsights.
    :type provider: str
    :param resource: Resource on which the operation is performed etc.
    :type resource: str
    :param operation: Type of operation: get, read, delete, etc.
    :type operation: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)


class OperationListResult(Model):
    """Result of the request to list OperationalInsights operations.

    :param value: List of operations supported by the OperationalInsights
     resource provider.
    :type value: list[~azure.mgmt.loganalytics.v2015_03_20.models.Operation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(self, **kwargs):
        super(OperationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ProxyResource(Model):
    """Common properties of proxy resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(ProxyResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.tags = kwargs.get('tags', None)


class Resource(Model):
    """The resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :param location: Required. Resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)


class SavedSearch(Model):
    """Value object for saved search results.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The id of the saved search.
    :vartype id: str
    :ivar name: The name of the saved search.
    :vartype name: str
    :ivar type: The type of the saved search.
    :vartype type: str
    :param e_tag: The ETag of the saved search.
    :type e_tag: str
    :param category: Required. The category of the saved search. This helps
     the user to find a saved search faster.
    :type category: str
    :param display_name: Required. Saved search display name.
    :type display_name: str
    :param query: Required. The query expression for the saved search. Please
     see
     https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-search-reference
     for reference.
    :type query: str
    :param version: The version number of the query language. The current
     version is 2 and is the default.
    :type version: long
    :param tags: The tags attached to the saved search.
    :type tags: list[~azure.mgmt.loganalytics.v2015_03_20.models.Tag]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'category': {'required': True},
        'display_name': {'required': True},
        'query': {'required': True},
        'version': {'maximum': 2, 'minimum': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'category': {'key': 'properties.category', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'long'},
        'tags': {'key': 'properties.tags', 'type': '[Tag]'},
    }

    def __init__(self, **kwargs):
        super(SavedSearch, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.e_tag = kwargs.get('e_tag', None)
        self.category = kwargs.get('category', None)
        self.display_name = kwargs.get('display_name', None)
        self.query = kwargs.get('query', None)
        self.version = kwargs.get('version', None)
        self.tags = kwargs.get('tags', None)


class SavedSearchesListResult(Model):
    """The saved search list operation response.

    :param metadata: Unused legacy property, kept here for backward
     compatibility.
    :type metadata: ~azure.mgmt.loganalytics.v2015_03_20.models.SearchMetadata
    :param value: The array of result values.
    :type value: list[~azure.mgmt.loganalytics.v2015_03_20.models.SavedSearch]
    """

    _attribute_map = {
        'metadata': {'key': '__metadata', 'type': 'SearchMetadata'},
        'value': {'key': 'value', 'type': '[SavedSearch]'},
    }

    def __init__(self, **kwargs):
        super(SavedSearchesListResult, self).__init__(**kwargs)
        self.metadata = kwargs.get('metadata', None)
        self.value = kwargs.get('value', None)


class SearchGetSchemaResponse(Model):
    """The get schema operation response.

    :param metadata: The metadata from search results.
    :type metadata: ~azure.mgmt.loganalytics.v2015_03_20.models.SearchMetadata
    :param value: The array of result values.
    :type value:
     list[~azure.mgmt.loganalytics.v2015_03_20.models.SearchSchemaValue]
    """

    _attribute_map = {
        'metadata': {'key': 'metadata', 'type': 'SearchMetadata'},
        'value': {'key': 'value', 'type': '[SearchSchemaValue]'},
    }

    def __init__(self, **kwargs):
        super(SearchGetSchemaResponse, self).__init__(**kwargs)
        self.metadata = kwargs.get('metadata', None)
        self.value = kwargs.get('value', None)


class SearchMetadata(Model):
    """Metadata for search results.

    :param search_id: The request id of the search.
    :type search_id: str
    :param result_type: The search result type.
    :type result_type: str
    :param total: The total number of search results.
    :type total: long
    :param top: The number of top search results.
    :type top: long
    :param id: The id of the search results request.
    :type id: str
    :param core_summaries: The core summaries.
    :type core_summaries:
     list[~azure.mgmt.loganalytics.v2015_03_20.models.CoreSummary]
    :param status: The status of the search results.
    :type status: str
    :param start_time: The start time for the search.
    :type start_time: datetime
    :param last_updated: The time of last update.
    :type last_updated: datetime
    :param e_tag: The ETag of the search results.
    :type e_tag: str
    :param sort: How the results are sorted.
    :type sort: list[~azure.mgmt.loganalytics.v2015_03_20.models.SearchSort]
    :param request_time: The request time.
    :type request_time: long
    :param aggregated_value_field: The aggregated value field.
    :type aggregated_value_field: str
    :param aggregated_grouping_fields: The aggregated grouping fields.
    :type aggregated_grouping_fields: str
    :param sum: The sum of all aggregates returned in the result set.
    :type sum: long
    :param max: The max of all aggregates returned in the result set.
    :type max: long
    :param schema: The schema.
    :type schema:
     ~azure.mgmt.loganalytics.v2015_03_20.models.SearchMetadataSchema
    """

    _attribute_map = {
        'search_id': {'key': 'requestId', 'type': 'str'},
        'result_type': {'key': 'resultType', 'type': 'str'},
        'total': {'key': 'total', 'type': 'long'},
        'top': {'key': 'top', 'type': 'long'},
        'id': {'key': 'id', 'type': 'str'},
        'core_summaries': {'key': 'coreSummaries', 'type': '[CoreSummary]'},
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'sort': {'key': 'sort', 'type': '[SearchSort]'},
        'request_time': {'key': 'requestTime', 'type': 'long'},
        'aggregated_value_field': {'key': 'aggregatedValueField', 'type': 'str'},
        'aggregated_grouping_fields': {'key': 'aggregatedGroupingFields', 'type': 'str'},
        'sum': {'key': 'sum', 'type': 'long'},
        'max': {'key': 'max', 'type': 'long'},
        'schema': {'key': 'schema', 'type': 'SearchMetadataSchema'},
    }

    def __init__(self, **kwargs):
        super(SearchMetadata, self).__init__(**kwargs)
        self.search_id = kwargs.get('search_id', None)
        self.result_type = kwargs.get('result_type', None)
        self.total = kwargs.get('total', None)
        self.top = kwargs.get('top', None)
        self.id = kwargs.get('id', None)
        self.core_summaries = kwargs.get('core_summaries', None)
        self.status = kwargs.get('status', None)
        self.start_time = kwargs.get('start_time', None)
        self.last_updated = kwargs.get('last_updated', None)
        self.e_tag = kwargs.get('e_tag', None)
        self.sort = kwargs.get('sort', None)
        self.request_time = kwargs.get('request_time', None)
        self.aggregated_value_field = kwargs.get('aggregated_value_field', None)
        self.aggregated_grouping_fields = kwargs.get('aggregated_grouping_fields', None)
        self.sum = kwargs.get('sum', None)
        self.max = kwargs.get('max', None)
        self.schema = kwargs.get('schema', None)


class SearchMetadataSchema(Model):
    """Schema metadata for search.

    :param name: The name of the metadata schema.
    :type name: str
    :param version: The version of the metadata schema.
    :type version: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(SearchMetadataSchema, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.version = kwargs.get('version', None)


class SearchSchemaValue(Model):
    """Value object for schema results.

    All required parameters must be populated in order to send to Azure.

    :param name: The name of the schema.
    :type name: str
    :param display_name: The display name of the schema.
    :type display_name: str
    :param type: The type.
    :type type: str
    :param indexed: Required. The boolean that indicates the field is
     searchable as free text.
    :type indexed: bool
    :param stored: Required. The boolean that indicates whether or not the
     field is stored.
    :type stored: bool
    :param facet: Required. The boolean that indicates whether or not the
     field is a facet.
    :type facet: bool
    :param owner_type: The array of workflows containing the field.
    :type owner_type: list[str]
    """

    _validation = {
        'indexed': {'required': True},
        'stored': {'required': True},
        'facet': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'indexed': {'key': 'indexed', 'type': 'bool'},
        'stored': {'key': 'stored', 'type': 'bool'},
        'facet': {'key': 'facet', 'type': 'bool'},
        'owner_type': {'key': 'ownerType', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(SearchSchemaValue, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.type = kwargs.get('type', None)
        self.indexed = kwargs.get('indexed', None)
        self.stored = kwargs.get('stored', None)
        self.facet = kwargs.get('facet', None)
        self.owner_type = kwargs.get('owner_type', None)


class SearchSort(Model):
    """The sort parameters for search.

    :param name: The name of the field the search query is sorted on.
    :type name: str
    :param order: The sort order of the search. Possible values include:
     'asc', 'desc'
    :type order: str or
     ~azure.mgmt.loganalytics.v2015_03_20.models.SearchSortEnum
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'order': {'key': 'order', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SearchSort, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.order = kwargs.get('order', None)


class SharedKeys(Model):
    """The shared keys for a workspace.

    :param primary_shared_key: The primary shared key of a workspace.
    :type primary_shared_key: str
    :param secondary_shared_key: The secondary shared key of a workspace.
    :type secondary_shared_key: str
    """

    _attribute_map = {
        'primary_shared_key': {'key': 'primarySharedKey', 'type': 'str'},
        'secondary_shared_key': {'key': 'secondarySharedKey', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SharedKeys, self).__init__(**kwargs)
        self.primary_shared_key = kwargs.get('primary_shared_key', None)
        self.secondary_shared_key = kwargs.get('secondary_shared_key', None)


class StorageAccount(Model):
    """Describes a storage account connection.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The Azure Resource Manager ID of the storage account
     resource.
    :type id: str
    :param key: Required. The storage account key.
    :type key: str
    """

    _validation = {
        'id': {'required': True},
        'key': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(StorageAccount, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.key = kwargs.get('key', None)


class StorageInsight(ProxyResource):
    """The top level storage insight resource container.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param containers: The names of the blob containers that the workspace
     should read
    :type containers: list[str]
    :param tables: The names of the Azure tables that the workspace should
     read
    :type tables: list[str]
    :param storage_account: Required. The storage account connection details
    :type storage_account:
     ~azure.mgmt.loganalytics.v2015_03_20.models.StorageAccount
    :ivar status: The status of the storage insight
    :vartype status:
     ~azure.mgmt.loganalytics.v2015_03_20.models.StorageInsightStatus
    :param e_tag: The ETag of the storage insight.
    :type e_tag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'storage_account': {'required': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'containers': {'key': 'properties.containers', 'type': '[str]'},
        'tables': {'key': 'properties.tables', 'type': '[str]'},
        'storage_account': {'key': 'properties.storageAccount', 'type': 'StorageAccount'},
        'status': {'key': 'properties.status', 'type': 'StorageInsightStatus'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(StorageInsight, self).__init__(**kwargs)
        self.containers = kwargs.get('containers', None)
        self.tables = kwargs.get('tables', None)
        self.storage_account = kwargs.get('storage_account', None)
        self.status = None
        self.e_tag = kwargs.get('e_tag', None)


class StorageInsightStatus(Model):
    """The status of the storage insight.

    All required parameters must be populated in order to send to Azure.

    :param state: Required. The state of the storage insight connection to the
     workspace. Possible values include: 'OK', 'ERROR'
    :type state: str or
     ~azure.mgmt.loganalytics.v2015_03_20.models.StorageInsightState
    :param description: Description of the state of the storage insight.
    :type description: str
    """

    _validation = {
        'state': {'required': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(StorageInsightStatus, self).__init__(**kwargs)
        self.state = kwargs.get('state', None)
        self.description = kwargs.get('description', None)


class Tag(Model):
    """A tag of a saved search.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The tag name.
    :type name: str
    :param value: Required. The tag value.
    :type value: str
    """

    _validation = {
        'name': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Tag, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class WorkspacePurgeBody(Model):
    """Describes the body of a purge request for an App Insights Workspace.

    All required parameters must be populated in order to send to Azure.

    :param table: Required. Table from which to purge data.
    :type table: str
    :param filters: Required. The set of columns and filters (queries) to run
     over them to purge the resulting data.
    :type filters:
     list[~azure.mgmt.loganalytics.v2015_03_20.models.WorkspacePurgeBodyFilters]
    """

    _validation = {
        'table': {'required': True},
        'filters': {'required': True},
    }

    _attribute_map = {
        'table': {'key': 'table', 'type': 'str'},
        'filters': {'key': 'filters', 'type': '[WorkspacePurgeBodyFilters]'},
    }

    def __init__(self, **kwargs):
        super(WorkspacePurgeBody, self).__init__(**kwargs)
        self.table = kwargs.get('table', None)
        self.filters = kwargs.get('filters', None)


class WorkspacePurgeBodyFilters(Model):
    """User-defined filters to return data which will be purged from the table.

    :param column: The column of the table over which the given query should
     run
    :type column: str
    :param operator: A query operator to evaluate over the provided column and
     value(s). Supported operators are ==, =~, in, in~, >, >=, <, <=, between,
     and have the same behavior as they would in a KQL query.
    :type operator: str
    :param value: the value for the operator to function over. This can be a
     number (e.g., > 100), a string (timestamp >= '2017-09-01') or array of
     values.
    :type value: object
    :param key: When filtering over custom dimensions, this key will be used
     as the name of the custom dimension.
    :type key: str
    """

    _attribute_map = {
        'column': {'key': 'column', 'type': 'str'},
        'operator': {'key': 'operator', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'key': {'key': 'key', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(WorkspacePurgeBodyFilters, self).__init__(**kwargs)
        self.column = kwargs.get('column', None)
        self.operator = kwargs.get('operator', None)
        self.value = kwargs.get('value', None)
        self.key = kwargs.get('key', None)


class WorkspacePurgeResponse(Model):
    """Response containing operationId for a specific purge action.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: Required. Id to use when querying for status for a
     particular purge operation.
    :type operation_id: str
    """

    _validation = {
        'operation_id': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(WorkspacePurgeResponse, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)


class WorkspacePurgeStatusResponse(Model):
    """Response containing status for a specific purge operation.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. Status of the operation represented by the
     requested Id. Possible values include: 'pending', 'completed'
    :type status: str or
     ~azure.mgmt.loganalytics.v2015_03_20.models.PurgeState
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(WorkspacePurgeStatusResponse, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
