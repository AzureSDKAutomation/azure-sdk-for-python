# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Resource(Model):
    """The resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :param location: Resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, location: str=None, tags=None, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class Cluster(Resource):
    """The top level Log Analytics cluster resource container.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :param location: Resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param identity: The identity of the resource.
    :type identity:
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.Identity
    :param sku: The sku properties.
    :type sku: ~azure.mgmt.loganalytics.v2019_08_01_preview.models.Sku
    :param next_link: The link used to get the next page of recommendations.
    :type next_link: str
    :ivar cluster_id: The ID associated with the cluster.
    :vartype cluster_id: str
    :ivar provisioning_state: The provisioning state of the cluster. Possible
     values include: 'Creating', 'Succeeded', 'Failed', 'Canceled', 'Deleting',
     'ProvisioningAccount'
    :vartype provisioning_state: str or
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.EntityStatus
    :param key_vault_properties: The associated key properties.
    :type key_vault_properties:
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.KeyVaultProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'cluster_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'next_link': {'key': 'properties.nextLink', 'type': 'str'},
        'cluster_id': {'key': 'properties.clusterId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'key_vault_properties': {'key': 'properties.keyVaultProperties', 'type': 'KeyVaultProperties'},
    }

    def __init__(self, *, location: str=None, tags=None, identity=None, sku=None, next_link: str=None, key_vault_properties=None, **kwargs) -> None:
        super(Cluster, self).__init__(location=location, tags=tags, **kwargs)
        self.identity = identity
        self.sku = sku
        self.next_link = next_link
        self.cluster_id = None
        self.provisioning_state = None
        self.key_vault_properties = key_vault_properties


class ClusterPatch(Model):
    """The top level Log Analytics cluster resource container.

    :param key_vault_properties: The associated key properties.
    :type key_vault_properties:
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.KeyVaultProperties
    :param sku: The sku properties.
    :type sku: ~azure.mgmt.loganalytics.v2019_08_01_preview.models.Sku
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'key_vault_properties': {'key': 'properties.keyVaultProperties', 'type': 'KeyVaultProperties'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, key_vault_properties=None, sku=None, tags=None, **kwargs) -> None:
        super(ClusterPatch, self).__init__(**kwargs)
        self.key_vault_properties = key_vault_properties
        self.sku = sku
        self.tags = tags


class ProxyResource(Model):
    """Common properties of proxy resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ProxyResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class DataExport(ProxyResource):
    """The top level data export resource container.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param data_export_id: The data export rule ID.
    :type data_export_id: str
    :param all_tables: When ‘true’, all workspace's tables are exported.
    :type all_tables: bool
    :param table_names: An array of tables to export, for example:
     [“Heartbeat, SecurityEvent”].
    :type table_names: list[str]
    :param resource_id: Required. The destination resource ID. This can be
     copied from the Properties entry of the destination resource in Azure.
    :type resource_id: str
    :ivar data_export_type: The type of the destination resource. Possible
     values include: 'StorageAccount', 'EventHub'
    :vartype data_export_type: str or
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.enum
    :param event_hub_name: Optional. Allows to define an Event Hub name. Not
     applicable when destination is Storage Account.
    :type event_hub_name: str
    :param enable: Active when enabled.
    :type enable: bool
    :param created_date: The latest data export rule modification time.
    :type created_date: str
    :param last_modified_date: Date and time when the export was last
     modified.
    :type last_modified_date: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'resource_id': {'required': True},
        'data_export_type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_export_id': {'key': 'properties.dataExportId', 'type': 'str'},
        'all_tables': {'key': 'properties.allTables', 'type': 'bool'},
        'table_names': {'key': 'properties.tableNames', 'type': '[str]'},
        'resource_id': {'key': 'properties.destination.resourceId', 'type': 'str'},
        'data_export_type': {'key': 'properties.destination.type', 'type': 'str'},
        'event_hub_name': {'key': 'properties.destination.metaData.eventHubName', 'type': 'str'},
        'enable': {'key': 'properties.enable', 'type': 'bool'},
        'created_date': {'key': 'properties.createdDate', 'type': 'str'},
        'last_modified_date': {'key': 'properties.lastModifiedDate', 'type': 'str'},
    }

    def __init__(self, *, resource_id: str, data_export_id: str=None, all_tables: bool=None, table_names=None, event_hub_name: str=None, enable: bool=None, created_date: str=None, last_modified_date: str=None, **kwargs) -> None:
        super(DataExport, self).__init__(**kwargs)
        self.data_export_id = data_export_id
        self.all_tables = all_tables
        self.table_names = table_names
        self.resource_id = resource_id
        self.data_export_type = None
        self.event_hub_name = event_hub_name
        self.enable = enable
        self.created_date = created_date
        self.last_modified_date = last_modified_date


class ErrorDetails(Model):
    """The details of the error.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message indicating why the operation failed.
    :vartype message: str
    :ivar target: The target of the particular error.
    :vartype target: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None


class ErrorResponse(Model):
    """Error response indicates that the service is not able to process the
    incoming request. The reason is provided in the error message.

    :param error: The details of the error.
    :type error:
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.ErrorDetails
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetails'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class Identity(Model):
    """Identity for the resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The principal ID of resource identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of resource.
    :vartype tenant_id: str
    :param type: Required. The identity type. Possible values include:
     'SystemAssigned', 'None'
    :type type: str or
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.IdentityType
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'IdentityType'},
    }

    def __init__(self, *, type, **kwargs) -> None:
        super(Identity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type


class KeyVaultProperties(Model):
    """KeyVaultProperties.

    :param key_vault_uri: The Key Vault uri which holds they key associated
     with the Log Analytics cluster.
    :type key_vault_uri: str
    :param key_name: The name of the key associated with the Log Analytics
     cluster.
    :type key_name: str
    :param key_version: The version of the key associated with the Log
     Analytics cluster.
    :type key_version: str
    """

    _attribute_map = {
        'key_vault_uri': {'key': 'keyVaultUri', 'type': 'str'},
        'key_name': {'key': 'keyName', 'type': 'str'},
        'key_version': {'key': 'keyVersion', 'type': 'str'},
    }

    def __init__(self, *, key_vault_uri: str=None, key_name: str=None, key_version: str=None, **kwargs) -> None:
        super(KeyVaultProperties, self).__init__(**kwargs)
        self.key_vault_uri = key_vault_uri
        self.key_name = key_name
        self.key_version = key_version


class LinkedService(ProxyResource):
    """The top level Linked service resource container.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param resource_id: The resource id of the resource that will be linked to
     the workspace. This should be used for linking resources which require
     read access
    :type resource_id: str
    :param write_access_resource_id: The resource id of the resource that will
     be linked to the workspace. This should be used for linking resources
     which require write access
    :type write_access_resource_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
        'write_access_resource_id': {'key': 'properties.writeAccessResourceId', 'type': 'str'},
    }

    def __init__(self, *, resource_id: str=None, write_access_resource_id: str=None, **kwargs) -> None:
        super(LinkedService, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.write_access_resource_id = write_access_resource_id


class LinkedStorageAccounts(ProxyResource):
    """Linked storage accounts top level resource container.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar data_source_type: Linked storage accounts type. Possible values
     include: 'CustomLogs', 'AzureWatson'
    :vartype data_source_type: str or
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.DataSourceType
    :param storage_account_ids: Linked storage accounts resources ids.
    :type storage_account_ids: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'data_source_type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_source_type': {'key': 'properties.dataSourceType', 'type': 'DataSourceType'},
        'storage_account_ids': {'key': 'properties.storageAccountIds', 'type': '[str]'},
    }

    def __init__(self, *, storage_account_ids=None, **kwargs) -> None:
        super(LinkedStorageAccounts, self).__init__(**kwargs)
        self.data_source_type = None
        self.storage_account_ids = storage_account_ids


class LinkedStorageAccountsCreate(ProxyResource):
    """Linked storage accounts top level resource container.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param storage_account_ids: Linked storage accounts resources ids.
    :type storage_account_ids: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'storage_account_ids': {'key': 'properties.storageAccountIds', 'type': '[str]'},
    }

    def __init__(self, *, storage_account_ids=None, **kwargs) -> None:
        super(LinkedStorageAccountsCreate, self).__init__(**kwargs)
        self.storage_account_ids = storage_account_ids


class Sku(Model):
    """Sku.

    :param capacity: The capacity value
    :type capacity: long
    :param name: The name of the SKU. Possible values include:
     'CapacityReservation'
    :type name: str or
     ~azure.mgmt.loganalytics.v2019_08_01_preview.models.SkuNameEnum
    """

    _attribute_map = {
        'capacity': {'key': 'capacity', 'type': 'long'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, capacity: int=None, name=None, **kwargs) -> None:
        super(Sku, self).__init__(**kwargs)
        self.capacity = capacity
        self.name = name
