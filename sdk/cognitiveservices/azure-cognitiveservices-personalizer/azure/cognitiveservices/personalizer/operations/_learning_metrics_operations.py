# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError

from .. import models


class LearningMetricsOperations(object):
    """LearningMetricsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def get(
            self, start_date=None, end_date=None, aggregation_interval=None, number_of_recent_events=None, aggregation_event_count=None, custom_headers=None, raw=False, **operation_config):
        """Get learning performance metrics.

        Get learning performance metrics aggregated by time or events.

        :param start_date: Start date to get the metrics for.
        :type start_date: datetime
        :param end_date: End date to get the metrics for.
        :type end_date: datetime
        :param aggregation_interval: Aggregation time period to aggregate the
         results for.
        :type aggregation_interval: str
        :param number_of_recent_events: Number of recent events.
        :type number_of_recent_events: long
        :param aggregation_event_count: Aggregation event window to aggregate
         the results for.
        :type aggregation_event_count: long
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype:
         list[list[~azure.cognitiveservices.personalizer.models.Metric]] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'Endpoint': self._serialize.url("self.config.endpoint", self.config.endpoint, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if start_date is not None:
            query_parameters['StartDate'] = self._serialize.query("start_date", start_date, 'iso-8601')
        if end_date is not None:
            query_parameters['EndDate'] = self._serialize.query("end_date", end_date, 'iso-8601')
        if aggregation_interval is not None:
            query_parameters['AggregationInterval'] = self._serialize.query("aggregation_interval", aggregation_interval, 'str')
        if number_of_recent_events is not None:
            query_parameters['NumberOfRecentEvents'] = self._serialize.query("number_of_recent_events", number_of_recent_events, 'long')
        if aggregation_event_count is not None:
            query_parameters['AggregationEventCount'] = self._serialize.query("aggregation_event_count", aggregation_event_count, 'long')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[[Metric]]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get.metadata = {'url': '/metrics/learning'}
