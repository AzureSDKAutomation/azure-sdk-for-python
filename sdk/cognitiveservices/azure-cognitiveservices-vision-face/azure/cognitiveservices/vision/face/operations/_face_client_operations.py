# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from .. import models


class FaceClientOperationsMixin(object):

    def detect_liveness_single_modal_post(
            self, content, metadata_image_type, metadata_image_data, model_version="", custom_headers=None, raw=False, **operation_config):
        """Detects liveness of a target face in a sequence of images of the same
        stream type (e.g. color).

        :param content: A ordered collection of application/octet-stream data
         containing the input data.
        :type content: list[object]
        :param metadata_image_type: Describes the image type based on the
         camera modality. Possible values include: 'color', 'infrared', 'depth'
        :type metadata_image_type: str
        :param metadata_image_data: An array of image metadata corresponding
         to each image in the input content payload.
        :type metadata_image_data: list[object]
        :param model_version: (optional) The liveness model to be used for the
         classification. Choose one from the following {
         "2020-02-15-preview.01", "latest" }, where "latest" refers to the
         "2020-02-15-preview.01" model. If this value is not specified then the
         "latest" model would be chosen by default.
        :type model_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: LivenessOutputs or ClientRawResponse if raw=true
        :rtype: ~azure.cognitiveservices.vision.face.models.LivenessOutputs or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.cognitiveservices.vision.face.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.detect_liveness_single_modal_post.metadata['url']
        path_format_arguments = {
            'Endpoint': self._serialize.url("self.config.endpoint", self.config.endpoint, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['Content'] = self._serialize.query("content", content, '[object]', div=',')
        if model_version is not None:
            query_parameters['model-version'] = self._serialize.query("model_version", model_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'multipart/form-data'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct form data
        form_data_content = {
            'Metadata.ImageType': metadata_image_type,
            'Metadata.ImageData': metadata_image_data,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 401, 403, 408, 415, 429]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('LivenessOutputs', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    detect_liveness_single_modal_post.metadata = {'url': '/detectLiveness/singleModal'}

    def detect_liveness_multi_modal_post(
            self, content, metadata_image_data, metadata_modalities_supported_by_camera, model_version="", metadata_camera_calibration_parameters=None, custom_headers=None, raw=False, **operation_config):
        """Detects liveness of a target face in a sequence of infrared, color
        and/or depth images.

        :param content: A ordered collection of application/octet-stream data
         containing the input data.
        :type content: list[object]
        :param metadata_image_data: An array of image metadata corresponding
         to each image in the input content payload.
        :type metadata_image_data: list[object]
        :param metadata_modalities_supported_by_camera: An array of modalities
         supported by camera, e.g. { color, infrared } or { color, infrared,
         depth }
        :type metadata_modalities_supported_by_camera: list[str]
        :param model_version: (optional) The liveness model to be used for the
         classification. Choose one from the following {
         "2020-02-15-preview.01", "latest" }, where "latest" refers to the
         "2020-02-15-preview.01" model. If this value is not specified then the
         "latest" model would be chosen by default.
        :type model_version: str
        :param metadata_camera_calibration_parameters: The required camera
         calibration parameters if the target face rectangle is not speicified
         in all of the images.
        :type metadata_camera_calibration_parameters: list[object]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: LivenessOutputs or ClientRawResponse if raw=true
        :rtype: ~azure.cognitiveservices.vision.face.models.LivenessOutputs or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.cognitiveservices.vision.face.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.detect_liveness_multi_modal_post.metadata['url']
        path_format_arguments = {
            'Endpoint': self._serialize.url("self.config.endpoint", self.config.endpoint, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['Content'] = self._serialize.query("content", content, '[object]', div=',')
        if model_version is not None:
            query_parameters['model-version'] = self._serialize.query("model_version", model_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'multipart/form-data'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct form data
        form_data_content = {
            'Metadata.ImageData': metadata_image_data,
            'Metadata.ModalitiesSupportedByCamera': metadata_modalities_supported_by_camera,
            'Metadata.CameraCalibrationParameters': metadata_camera_calibration_parameters,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 401, 403, 408, 415, 429]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('LivenessOutputs', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    detect_liveness_multi_modal_post.metadata = {'url': '/detectLiveness/multiModal'}
