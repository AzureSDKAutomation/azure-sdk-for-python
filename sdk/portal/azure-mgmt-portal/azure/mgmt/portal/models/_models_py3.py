# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Dashboard(Model):
    """The shared dashboard resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param lenses: The dashboard lenses.
    :type lenses: list[object]
    :param metadata: The dashboard metadata.
    :type metadata: dict[str, object]
    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :param location: Required. Resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'lenses': {'key': 'properties.lenses', 'type': '[object]'},
        'metadata': {'key': 'properties.metadata', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, location: str, lenses=None, metadata=None, tags=None, **kwargs) -> None:
        super(Dashboard, self).__init__(**kwargs)
        self.lenses = lenses
        self.metadata = metadata
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class DashboardLens(Model):
    """A dashboard lens.

    All required parameters must be populated in order to send to Azure.

    :param order: Required. The lens order.
    :type order: int
    :param parts: Required. The dashboard parts.
    :type parts: list[object]
    :param metadata: The dashboard len's metadata.
    :type metadata: dict[str, object]
    """

    _validation = {
        'order': {'required': True},
        'parts': {'required': True},
    }

    _attribute_map = {
        'order': {'key': 'order', 'type': 'int'},
        'parts': {'key': 'parts', 'type': '[object]'},
        'metadata': {'key': 'metadata', 'type': '{object}'},
    }

    def __init__(self, *, order: int, parts, metadata=None, **kwargs) -> None:
        super(DashboardLens, self).__init__(**kwargs)
        self.order = order
        self.parts = parts
        self.metadata = metadata


class DashboardPartMetadata(Model):
    """A dashboard part metadata.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MarkdownPartMetadata

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Extension/HubsExtension/PartType/MarkdownPart': 'MarkdownPartMetadata'}
    }

    def __init__(self, **kwargs) -> None:
        super(DashboardPartMetadata, self).__init__(**kwargs)
        self.type = None


class DashboardParts(Model):
    """A dashboard part.

    All required parameters must be populated in order to send to Azure.

    :param position: Required. The dashboard's part position.
    :type position: ~azure.mgmt.portal.models.DashboardPartsPosition
    :param metadata: The dashboard part's metadata.
    :type metadata: ~azure.mgmt.portal.models.DashboardPartMetadata
    """

    _validation = {
        'position': {'required': True},
    }

    _attribute_map = {
        'position': {'key': 'position', 'type': 'DashboardPartsPosition'},
        'metadata': {'key': 'metadata', 'type': 'DashboardPartMetadata'},
    }

    def __init__(self, *, position, metadata=None, **kwargs) -> None:
        super(DashboardParts, self).__init__(**kwargs)
        self.position = position
        self.metadata = metadata


class DashboardPartsPosition(Model):
    """The dashboard's part position.

    All required parameters must be populated in order to send to Azure.

    :param x: Required. The dashboard's part x coordinate.
    :type x: int
    :param y: Required. The dashboard's part y coordinate.
    :type y: int
    :param row_span: Required. The dashboard's part row span.
    :type row_span: int
    :param col_span: Required. The dashboard's part column span.
    :type col_span: int
    :param metadata: The dashboard part's metadata.
    :type metadata: dict[str, object]
    """

    _validation = {
        'x': {'required': True},
        'y': {'required': True},
        'row_span': {'required': True},
        'col_span': {'required': True},
    }

    _attribute_map = {
        'x': {'key': 'x', 'type': 'int'},
        'y': {'key': 'y', 'type': 'int'},
        'row_span': {'key': 'rowSpan', 'type': 'int'},
        'col_span': {'key': 'colSpan', 'type': 'int'},
        'metadata': {'key': 'metadata', 'type': '{object}'},
    }

    def __init__(self, *, x: int, y: int, row_span: int, col_span: int, metadata=None, **kwargs) -> None:
        super(DashboardPartsPosition, self).__init__(**kwargs)
        self.x = x
        self.y = y
        self.row_span = row_span
        self.col_span = col_span
        self.metadata = metadata


class ErrorDefinition(Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Service specific error code which serves as the substatus for
     the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.portal.models.ErrorDefinition]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDefinition]'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorDefinition, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(Model):
    """Error response.

    :param error: The error details.
    :type error: ~azure.mgmt.portal.models.ErrorDefinition
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDefinition'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class MarkdownPartMetadata(DashboardPartMetadata):
    """Markdown part metadata.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param inputs: Input to dashboard part.
    :type inputs: list[object]
    :param settings: Markdown part settings.
    :type settings: ~azure.mgmt.portal.models.MarkdownPartMetadataSettings
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'inputs': {'key': 'inputs', 'type': '[object]'},
        'settings': {'key': 'settings', 'type': 'MarkdownPartMetadataSettings'},
    }

    def __init__(self, *, inputs=None, settings=None, **kwargs) -> None:
        super(MarkdownPartMetadata, self).__init__(**kwargs)
        self.inputs = inputs
        self.settings = settings
        self.type = 'Extension/HubsExtension/PartType/MarkdownPart'


class MarkdownPartMetadataSettings(Model):
    """Markdown part settings.

    :param content: The content of markdown part.
    :type content:
     ~azure.mgmt.portal.models.MarkdownPartMetadataSettingsContent
    """

    _attribute_map = {
        'content': {'key': 'content', 'type': 'MarkdownPartMetadataSettingsContent'},
    }

    def __init__(self, *, content=None, **kwargs) -> None:
        super(MarkdownPartMetadataSettings, self).__init__(**kwargs)
        self.content = content


class MarkdownPartMetadataSettingsContent(Model):
    """The content of markdown part.

    :param settings: The setting of the content of markdown part.
    :type settings:
     ~azure.mgmt.portal.models.MarkdownPartMetadataSettingsContentSettings
    """

    _attribute_map = {
        'settings': {'key': 'settings', 'type': 'MarkdownPartMetadataSettingsContentSettings'},
    }

    def __init__(self, *, settings=None, **kwargs) -> None:
        super(MarkdownPartMetadataSettingsContent, self).__init__(**kwargs)
        self.settings = settings


class MarkdownPartMetadataSettingsContentSettings(Model):
    """The setting of the content of markdown part.

    :param content: The content of the markdown part.
    :type content: str
    :param title: The title of the markdown part.
    :type title: str
    :param subtitle: The subtitle of the mardown part.
    :type subtitle: str
    :param markdown_source: The source of the content of the markdown part.
    :type markdown_source: object
    :param markdown_uri: The uri of markdown content.
    :type markdown_uri: str
    """

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'subtitle': {'key': 'subtitle', 'type': 'str'},
        'markdown_source': {'key': 'markdownSource', 'type': 'object'},
        'markdown_uri': {'key': 'markdownUri', 'type': 'str'},
    }

    def __init__(self, *, content: str=None, title: str=None, subtitle: str=None, markdown_source=None, markdown_uri: str=None, **kwargs) -> None:
        super(MarkdownPartMetadataSettingsContentSettings, self).__init__(**kwargs)
        self.content = content
        self.title = title
        self.subtitle = subtitle
        self.markdown_source = markdown_source
        self.markdown_uri = markdown_uri


class PatchableDashboard(Model):
    """The shared dashboard resource definition.

    :param lenses: The dashboard lenses.
    :type lenses: list[object]
    :param metadata: The dashboard metadata.
    :type metadata: dict[str, object]
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'lenses': {'key': 'properties.lenses', 'type': '[object]'},
        'metadata': {'key': 'properties.metadata', 'type': '{object}'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, lenses=None, metadata=None, tags=None, **kwargs) -> None:
        super(PatchableDashboard, self).__init__(**kwargs)
        self.lenses = lenses
        self.metadata = metadata
        self.tags = tags


class ResourceProviderOperation(Model):
    """Supported operations of this resource provider.

    :param name: Operation name, in format of
     {provider}/{resource}/{operation}
    :type name: str
    :param is_data_action: Indicates whether the operation applies to
     data-plane.
    :type is_data_action: str
    :param display: Display metadata associated with the operation.
    :type display: ~azure.mgmt.portal.models.ResourceProviderOperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'str'},
        'display': {'key': 'display', 'type': 'ResourceProviderOperationDisplay'},
    }

    def __init__(self, *, name: str=None, is_data_action: str=None, display=None, **kwargs) -> None:
        super(ResourceProviderOperation, self).__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.display = display


class ResourceProviderOperationDisplay(Model):
    """Display metadata associated with the operation.

    :param provider: Resource provider: Microsoft Custom Providers.
    :type provider: str
    :param resource: Resource on which the operation is performed.
    :type resource: str
    :param operation: Type of operation: get, read, delete, etc.
    :type operation: str
    :param description: Description of this operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, resource: str=None, operation: str=None, description: str=None, **kwargs) -> None:
        super(ResourceProviderOperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description
