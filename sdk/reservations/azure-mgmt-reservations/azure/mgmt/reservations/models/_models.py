# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AppliedReservationList(Model):
    """AppliedReservationList.

    :param value:
    :type value: list[str]
    :param next_link: Url to get the next page of reservations
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[str]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AppliedReservationList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class AppliedReservations(Model):
    """AppliedReservations.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Identifier of the applied reservations
    :vartype id: str
    :ivar name: Name of resource
    :vartype name: str
    :ivar type: Type of resource. "Microsoft.Capacity/AppliedReservations"
    :vartype type: str
    :param reservation_order_ids:
    :type reservation_order_ids:
     ~azure.mgmt.reservations.models.AppliedReservationList
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'reservation_order_ids': {'key': 'properties.reservationOrderIds', 'type': 'AppliedReservationList'},
    }

    def __init__(self, **kwargs):
        super(AppliedReservations, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.reservation_order_ids = kwargs.get('reservation_order_ids', None)


class Catalog(Model):
    """Catalog.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar resource_type: The type of resource the SKU applies to.
    :vartype resource_type: str
    :ivar name: The name of SKU
    :vartype name: str
    :ivar tier: The tier of this SKU
    :vartype tier: str
    :ivar size: The size of this SKU
    :vartype size: str
    :ivar terms: Available reservation terms for this resource
    :vartype terms: list[str]
    :ivar locations:
    :vartype locations: list[str]
    :ivar capabilities:
    :vartype capabilities: list[~azure.mgmt.reservations.models.SkuCapability]
    :ivar restrictions:
    :vartype restrictions:
     list[~azure.mgmt.reservations.models.SkuRestriction]
    """

    _validation = {
        'resource_type': {'readonly': True},
        'name': {'readonly': True},
        'tier': {'readonly': True},
        'size': {'readonly': True},
        'terms': {'readonly': True},
        'locations': {'readonly': True},
        'capabilities': {'readonly': True},
        'restrictions': {'readonly': True},
    }

    _attribute_map = {
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'terms': {'key': 'terms', 'type': '[str]'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'capabilities': {'key': 'capabilities', 'type': '[SkuCapability]'},
        'restrictions': {'key': 'restrictions', 'type': '[SkuRestriction]'},
    }

    def __init__(self, **kwargs):
        super(Catalog, self).__init__(**kwargs)
        self.resource_type = None
        self.name = None
        self.tier = None
        self.size = None
        self.terms = None
        self.locations = None
        self.capabilities = None
        self.restrictions = None


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class CreateGenericQuotaRequestParameters(Model):
    """Quota change requests information.

    :param value: Quota change requests.
    :type value: list[~azure.mgmt.reservations.models.CurrentQuotaLimitBase]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CurrentQuotaLimitBase]'},
    }

    def __init__(self, **kwargs):
        super(CreateGenericQuotaRequestParameters, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class CurrentQuotaLimit(Model):
    """Current quota limits.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param properties: Quota properties for the resource.
    :type properties: ~azure.mgmt.reservations.models.QuotaProperties
    :ivar provisioning_state: The details of the quota request status.
    :vartype provisioning_state: object
    :ivar message: A user friendly message.
    :vartype message: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'properties': {'key': 'quotaInformation.properties', 'type': 'QuotaProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'object'},
        'message': {'key': 'properties.message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CurrentQuotaLimit, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.provisioning_state = None
        self.message = None


class CurrentQuotaLimitBase(Model):
    """Quota properties.

    :param properties: Quota properties for the resource.
    :type properties: ~azure.mgmt.reservations.models.QuotaProperties
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'QuotaProperties'},
    }

    def __init__(self, **kwargs):
        super(CurrentQuotaLimitBase, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class Error(Model):
    """Error.

    :param error:
    :type error: ~azure.mgmt.reservations.models.ExtendedErrorInfo
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ExtendedErrorInfo'},
    }

    def __init__(self, **kwargs):
        super(Error, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorException(HttpOperationError):
    """Server responsed with exception of type: 'Error'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorException, self).__init__(deserialize, response, 'Error', *args)


class ExceptionResponse(Model):
    """The API error.

    :param error: The API error details.
    :type error: ~azure.mgmt.reservations.models.ServiceError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ServiceError'},
    }

    def __init__(self, **kwargs):
        super(ExceptionResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ExceptionResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ExceptionResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ExceptionResponseException, self).__init__(deserialize, response, 'ExceptionResponse', *args)


class ExtendedErrorInfo(Model):
    """ExtendedErrorInfo.

    :param code: Possible values include: 'NotSpecified',
     'InternalServerError', 'ServerTimeout', 'AuthorizationFailed',
     'BadRequest', 'ClientCertificateThumbprintNotSet',
     'InvalidRequestContent', 'OperationFailed', 'HttpMethodNotSupported',
     'InvalidRequestUri', 'MissingTenantId', 'InvalidTenantId',
     'InvalidReservationOrderId', 'InvalidReservationId',
     'ReservationIdNotInReservationOrder', 'ReservationOrderNotFound',
     'InvalidSubscriptionId', 'InvalidAccessToken', 'InvalidLocationId',
     'UnauthenticatedRequestsThrottled', 'InvalidHealthCheckType', 'Forbidden',
     'BillingScopeIdCannotBeChanged',
     'AppliedScopesNotAssociatedWithCommerceAccount',
     'AppliedScopesSameAsExisting', 'RoleAssignmentCreationFailed',
     'ReservationOrderCreationFailed', 'ReservationOrderNotEnabled',
     'CapacityUpdateScopesFailed', 'UnsupportedReservationTerm',
     'ReservationOrderIdAlreadyExists', 'RiskCheckFailed', 'CreateQuoteFailed',
     'ActivateQuoteFailed', 'NonsupportedAccountId',
     'PaymentInstrumentNotFound', 'MissingAppliedScopesForSingle',
     'NoValidReservationsToReRate', 'ReRateOnlyAllowedForEA',
     'OperationCannotBePerformedInCurrentState',
     'InvalidSingleAppliedScopesCount', 'InvalidFulfillmentRequestParameters',
     'NotSupportedCountry', 'InvalidRefundQuantity', 'PurchaseError',
     'BillingCustomerInputError', 'BillingPaymentInstrumentSoftError',
     'BillingPaymentInstrumentHardError', 'BillingTransientError',
     'BillingError', 'FulfillmentConfigurationError',
     'FulfillmentOutOfStockError', 'FulfillmentTransientError',
     'FulfillmentError', 'CalculatePriceFailed'
    :type code: str or ~azure.mgmt.reservations.models.enum
    :param message:
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ExtendedErrorInfo, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class ExtendedStatusInfo(Model):
    """ExtendedStatusInfo.

    :param status_code: Possible values include: 'None', 'Pending', 'Active',
     'PurchaseError', 'PaymentInstrumentError', 'Split', 'Merged', 'Expired',
     'Succeeded'
    :type status_code: str or ~azure.mgmt.reservations.models.enum
    :param message: The message giving detailed information about the status
     code.
    :type message: str
    """

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ExtendedStatusInfo, self).__init__(**kwargs)
        self.status_code = kwargs.get('status_code', None)
        self.message = kwargs.get('message', None)


class MergeRequest(Model):
    """MergeRequest.

    :param sources: Format of the resource id should be
     /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
    :type sources: list[str]
    """

    _attribute_map = {
        'sources': {'key': 'properties.sources', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(MergeRequest, self).__init__(**kwargs)
        self.sources = kwargs.get('sources', None)


class OperationDisplay(Model):
    """OperationDisplay.

    :param provider:
    :type provider: str
    :param resource:
    :type resource: str
    :param operation:
    :type operation: str
    :param description:
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class OperationResponse(Model):
    """OperationResponse.

    :param name:
    :type name: str
    :param display:
    :type display: ~azure.mgmt.reservations.models.OperationDisplay
    :param origin:
    :type origin: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationResponse, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)


class Patch(Model):
    """Patch.

    :param applied_scope_type: Possible values include: 'Single', 'Shared'
    :type applied_scope_type: str or ~azure.mgmt.reservations.models.enum
    :param applied_scopes:
    :type applied_scopes: list[str]
    """

    _attribute_map = {
        'applied_scope_type': {'key': 'properties.appliedScopeType', 'type': 'str'},
        'applied_scopes': {'key': 'properties.appliedScopes', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(Patch, self).__init__(**kwargs)
        self.applied_scope_type = kwargs.get('applied_scope_type', None)
        self.applied_scopes = kwargs.get('applied_scopes', None)


class QuotaLimitsResponse(Model):
    """Quotas (service limits) in the request response.

    :param value: List of quotas with the quota request status.
    :type value: list[~azure.mgmt.reservations.models.CurrentQuotaLimit]
    :param next_link: The URI for fetching the next page of quota limits. When
     no more pages exist, the value is null.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CurrentQuotaLimit]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(QuotaLimitsResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class QuotaProperties(Model):
    """Quota properties for the resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param limit: Quota properties.
    :type limit: int
    :ivar current_value: Current usage value for the resource.
    :vartype current_value: int
    :param unit:  The limit units, such as **count** and **bytes**. Use the
     unit field provided in the response of the GET quota operation.
    :type unit: str
    :param name: Name of the resource provide by the resource provider. Use
     this property for quotaRequests resource operations.
    :type name: ~azure.mgmt.reservations.models.ResourceName
    :param resource_type: The name of the resource type.
    :type resource_type: object
    :ivar quota_period: The time period over which the quota usage values are
     summarized. For example, P1D (per one day), PT1M (per one minute), and
     PT1S (per one second). This parameter is optional because, for some
     resources such as compute, the time period is irrelevant.
    :vartype quota_period: str
    :param properties: Additional properties for the specified resource
     provider.
    :type properties: object
    """

    _validation = {
        'current_value': {'readonly': True},
        'quota_period': {'readonly': True},
    }

    _attribute_map = {
        'limit': {'key': 'limit', 'type': 'int'},
        'current_value': {'key': 'currentValue', 'type': 'int'},
        'unit': {'key': 'unit', 'type': 'str'},
        'name': {'key': 'name', 'type': 'ResourceName'},
        'resource_type': {'key': 'resourceType', 'type': 'object'},
        'quota_period': {'key': 'quotaPeriod', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(QuotaProperties, self).__init__(**kwargs)
        self.limit = kwargs.get('limit', None)
        self.current_value = None
        self.unit = kwargs.get('unit', None)
        self.name = kwargs.get('name', None)
        self.resource_type = kwargs.get('resource_type', None)
        self.quota_period = None
        self.properties = kwargs.get('properties', None)


class QuotaRequestDetails(Model):
    """Quota request details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Quota request ID.
    :vartype id: str
    :ivar name: Quota request name.
    :vartype name: str
    :param provisioning_state: The quota request status.
    :type provisioning_state: object
    :ivar message: User friendly status message.
    :vartype message: str
    :ivar request_submit_time: The time when the quota request was submitted
     using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
    :vartype request_submit_time: datetime
    :param value: The quotaRequests.
    :type value: list[~azure.mgmt.reservations.models.SubRequest]
    :ivar type: Resource type
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'message': {'readonly': True},
        'request_submit_time': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'object'},
        'message': {'key': 'properties.message', 'type': 'str'},
        'request_submit_time': {'key': 'properties.requestSubmitTime', 'type': 'iso-8601'},
        'value': {'key': 'properties.value', 'type': '[SubRequest]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(QuotaRequestDetails, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.message = None
        self.request_submit_time = None
        self.value = kwargs.get('value', None)
        self.type = None


class QuotaRequestOneResourceSubmitResponse(Model):
    """Response for the quota submission request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The quota request ID.
    :vartype id: str
    :ivar name: The name of the quota request.
    :vartype name: str
    :ivar type: Type of resource. "Microsoft.Capacity/ServiceLimits"
    :vartype type: str
    :ivar provisioning_state: The quota request status.
    :vartype provisioning_state: object
    :ivar message: User friendly status message.
    :vartype message: str
    :ivar request_submit_time: The time when the quota request was submitted
     using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
    :vartype request_submit_time: datetime
    :param properties: Quota properties for the resource.
    :type properties: ~azure.mgmt.reservations.models.QuotaProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'message': {'readonly': True},
        'request_submit_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'object'},
        'message': {'key': 'properties.message', 'type': 'str'},
        'request_submit_time': {'key': 'properties.requestSubmitTime', 'type': 'iso-8601'},
        'properties': {'key': 'properties.properties.properties', 'type': 'QuotaProperties'},
    }

    def __init__(self, **kwargs):
        super(QuotaRequestOneResourceSubmitResponse, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.provisioning_state = None
        self.message = None
        self.request_submit_time = None
        self.properties = kwargs.get('properties', None)


class QuotaRequestProperties(Model):
    """The details of quota request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param provisioning_state: The quota request status.
    :type provisioning_state: object
    :ivar message: User friendly status message.
    :vartype message: str
    :ivar request_submit_time: The time when the quota request was submitted
     using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
    :vartype request_submit_time: datetime
    :param value: The quotaRequests.
    :type value: list[~azure.mgmt.reservations.models.SubRequest]
    """

    _validation = {
        'message': {'readonly': True},
        'request_submit_time': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'object'},
        'message': {'key': 'message', 'type': 'str'},
        'request_submit_time': {'key': 'requestSubmitTime', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': '[SubRequest]'},
    }

    def __init__(self, **kwargs):
        super(QuotaRequestProperties, self).__init__(**kwargs)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.message = None
        self.request_submit_time = None
        self.value = kwargs.get('value', None)


class QuotaRequestSubmitResponse(Model):
    """Response for the quota submission request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The quota request ID.
    :vartype id: str
    :ivar name: The name of the quota request.
    :vartype name: str
    :param properties: The quota request details.
    :type properties: ~azure.mgmt.reservations.models.QuotaRequestProperties
    :ivar type: Type of resource. "Microsoft.Capacity/serviceLimits"
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'QuotaRequestProperties'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(QuotaRequestSubmitResponse, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.properties = kwargs.get('properties', None)
        self.type = None


class QuotaRequestSubmitResponse201(Model):
    """Response with request ID that the quota request was accepted.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The quota request ID. Use the requestId parameter to check the
     request status.
    :vartype id: str
    :ivar name: Operation ID
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :ivar provisioning_state: The details of the quota request status.
    :vartype provisioning_state: object
    :ivar message: A user friendly message.
    :vartype message: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'object'},
        'message': {'key': 'properties.message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(QuotaRequestSubmitResponse201, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.provisioning_state = None
        self.message = None


class ReservationMergeProperties(Model):
    """ReservationMergeProperties.

    :param merge_destination: Reservation Resource Id Created due to the
     merge. Format of the resource Id is
     /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
    :type merge_destination: str
    :param merge_sources: Resource Ids of the Source Reservation's merged to
     form this Reservation. Format of the resource Id is
     /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
    :type merge_sources: list[str]
    """

    _attribute_map = {
        'merge_destination': {'key': 'mergeDestination', 'type': 'str'},
        'merge_sources': {'key': 'mergeSources', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ReservationMergeProperties, self).__init__(**kwargs)
        self.merge_destination = kwargs.get('merge_destination', None)
        self.merge_sources = kwargs.get('merge_sources', None)


class ReservationOrderResponse(Model):
    """ReservationOrderResponse.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param etag:
    :type etag: int
    :ivar id: Identifier of the reservation
    :vartype id: str
    :ivar name: Name of the reservation
    :vartype name: str
    :param display_name: Friendly name for user to easily identified the
     reservation.
    :type display_name: str
    :param request_date_time: This is the DateTime when the reservation was
     initially requested for purchase.
    :type request_date_time: datetime
    :param created_date_time: This is the DateTime when the reservation was
     created.
    :type created_date_time: datetime
    :param expiry_date: This is the date when the Reservation will expire.
    :type expiry_date: date
    :param original_quantity: Total Quantity of the SKUs purchased in the
     Reservation.
    :type original_quantity: int
    :param term: Possible values include: 'P1Y', 'P3Y'
    :type term: str or ~azure.mgmt.reservations.models.enum
    :param provisioning_state: Possible values include: 'Creating',
     'PendingResourceHold', 'ConfirmedResourceHold', 'PendingBilling',
     'ConfirmedBilling', 'Created', 'Succeeded', 'Cancelled', 'Expired',
     'BillingFailed', 'Failed', 'Split', 'Merged'
    :type provisioning_state: str or ~azure.mgmt.reservations.models.enum
    :param reservations:
    :type reservations:
     list[~azure.mgmt.reservations.models.ReservationResponse]
    :ivar type: Type of resource. "Microsoft.Capacity/reservations"
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'etag': {'key': 'etag', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'request_date_time': {'key': 'properties.requestDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'properties.createdDateTime', 'type': 'iso-8601'},
        'expiry_date': {'key': 'properties.expiryDate', 'type': 'date'},
        'original_quantity': {'key': 'properties.originalQuantity', 'type': 'int'},
        'term': {'key': 'properties.term', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'reservations': {'key': 'properties.reservations', 'type': '[ReservationResponse]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ReservationOrderResponse, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.id = None
        self.name = None
        self.display_name = kwargs.get('display_name', None)
        self.request_date_time = kwargs.get('request_date_time', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.expiry_date = kwargs.get('expiry_date', None)
        self.original_quantity = kwargs.get('original_quantity', None)
        self.term = kwargs.get('term', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.reservations = kwargs.get('reservations', None)
        self.type = None


class ReservationProperties(Model):
    """ReservationProperties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param display_name: Friendly name for user to easily identify the
     reservation
    :type display_name: str
    :param applied_scopes:
    :type applied_scopes: list[str]
    :param applied_scope_type: Possible values include: 'Single', 'Shared'
    :type applied_scope_type: str or ~azure.mgmt.reservations.models.enum
    :param quantity: Quantity of the SKUs that are part of the Reservation.
    :type quantity: int
    :param provisioning_state: Possible values include: 'Creating',
     'PendingResourceHold', 'ConfirmedResourceHold', 'PendingBilling',
     'ConfirmedBilling', 'Created', 'Succeeded', 'Cancelled', 'Expired',
     'BillingFailed', 'Failed', 'Split', 'Merged'
    :type provisioning_state: str or ~azure.mgmt.reservations.models.enum
    :param effective_date_time: DateTime of the Reservation starting when this
     version is effective from.
    :type effective_date_time: datetime
    :ivar last_updated_date_time: DateTime of the last time the Reservation
     was updated.
    :vartype last_updated_date_time: datetime
    :param expiry_date: This is the date when the Reservation will expire.
    :type expiry_date: date
    :param extended_status_info:
    :type extended_status_info:
     ~azure.mgmt.reservations.models.ExtendedStatusInfo
    :param split_properties:
    :type split_properties:
     ~azure.mgmt.reservations.models.ReservationSplitProperties
    :param merge_properties:
    :type merge_properties:
     ~azure.mgmt.reservations.models.ReservationMergeProperties
    """

    _validation = {
        'last_updated_date_time': {'readonly': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'applied_scopes': {'key': 'appliedScopes', 'type': '[str]'},
        'applied_scope_type': {'key': 'appliedScopeType', 'type': 'str'},
        'quantity': {'key': 'quantity', 'type': 'int'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'effective_date_time': {'key': 'effectiveDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'expiry_date': {'key': 'expiryDate', 'type': 'date'},
        'extended_status_info': {'key': 'extendedStatusInfo', 'type': 'ExtendedStatusInfo'},
        'split_properties': {'key': 'splitProperties', 'type': 'ReservationSplitProperties'},
        'merge_properties': {'key': 'mergeProperties', 'type': 'ReservationMergeProperties'},
    }

    def __init__(self, **kwargs):
        super(ReservationProperties, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.applied_scopes = kwargs.get('applied_scopes', None)
        self.applied_scope_type = kwargs.get('applied_scope_type', None)
        self.quantity = kwargs.get('quantity', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.effective_date_time = kwargs.get('effective_date_time', None)
        self.last_updated_date_time = None
        self.expiry_date = kwargs.get('expiry_date', None)
        self.extended_status_info = kwargs.get('extended_status_info', None)
        self.split_properties = kwargs.get('split_properties', None)
        self.merge_properties = kwargs.get('merge_properties', None)


class ReservationResponse(Model):
    """ReservationResponse.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param location: Possible values include: 'westus', 'eastus', 'eastus2',
     'northcentralus', 'westus2', 'southcentralus', 'centralus', 'westeurope',
     'northeurope', 'eastasia', 'southeastasia', 'japaneast', 'japanwest',
     'brazilsouth', 'australiaeast', 'australiasoutheast', 'southindia',
     'westindia', 'centralindia', 'canadacentral', 'canadaeast', 'uksouth',
     'westcentralus', 'ukwest'
    :type location: str or ~azure.mgmt.reservations.models.enum
    :param etag:
    :type etag: int
    :ivar id: Identifier of the reservation
    :vartype id: str
    :ivar name: Name of the reservation
    :vartype name: str
    :param kind: Resource Provider type to be reserved. Possible values
     include: 'Microsoft.Compute'
    :type kind: str or ~azure.mgmt.reservations.models.Kind
    :param sku:
    :type sku: ~azure.mgmt.reservations.models.SkuName
    :param properties:
    :type properties: ~azure.mgmt.reservations.models.ReservationProperties
    :ivar type: Type of resource.
     "Microsoft.Capacity/reservationOrders/reservations"
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'Kind'},
        'sku': {'key': 'sku', 'type': 'SkuName'},
        'properties': {'key': 'properties', 'type': 'ReservationProperties'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ReservationResponse, self).__init__(**kwargs)
        self.location = kwargs.get('location', None)
        self.etag = kwargs.get('etag', None)
        self.id = None
        self.name = None
        self.kind = kwargs.get('kind', None)
        self.sku = kwargs.get('sku', None)
        self.properties = kwargs.get('properties', None)
        self.type = None


class ReservationSplitProperties(Model):
    """ReservationSplitProperties.

    :param split_destinations: List of destination Resource Id that are
     created due to split. Format of the resource Id is
     /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
    :type split_destinations: list[str]
    :param split_source: Resource Id of the Reservation from which this is
     split. Format of the resource Id is
     /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
    :type split_source: str
    """

    _attribute_map = {
        'split_destinations': {'key': 'splitDestinations', 'type': '[str]'},
        'split_source': {'key': 'splitSource', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ReservationSplitProperties, self).__init__(**kwargs)
        self.split_destinations = kwargs.get('split_destinations', None)
        self.split_source = kwargs.get('split_source', None)


class ResourceName(Model):
    """Resource name provided by the resource provider. Use this property for
    quotaRequest parameter.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param value: Resource name.
    :type value: str
    :ivar localized_value: Resource display localized name.
    :vartype localized_value: str
    """

    _validation = {
        'localized_value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceName, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.localized_value = None


class ServiceError(Model):
    """The API error details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param code: The error code.
    :type code: str
    :param message: The error message text.
    :type message: str
    :ivar details: The list of error details.
    :vartype details: list[~azure.mgmt.reservations.models.ServiceErrorDetail]
    """

    _validation = {
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ServiceErrorDetail]'},
    }

    def __init__(self, **kwargs):
        super(ServiceError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.details = None


class ServiceErrorDetail(Model):
    """The error details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None


class SkuCapability(Model):
    """SkuCapability.

    :param name: An invariant to describe the feature.
    :type name: str
    :param value: An invariant if the feature is measured by quantity.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SkuCapability, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class SkuName(Model):
    """SkuName.

    :param name:
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SkuName, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class SkuRestriction(Model):
    """SkuRestriction.

    :param type: The type of restrictions.
    :type type: str
    :param values: The value of restrictions. If the restriction type is set
     to location. This would be different locations where the SKU is
     restricted.
    :type values: list[str]
    :param reason_code: The reason for restriction.
    :type reason_code: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
        'reason_code': {'key': 'reasonCode', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SkuRestriction, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.values = kwargs.get('values', None)
        self.reason_code = kwargs.get('reason_code', None)


class SplitRequest(Model):
    """SplitRequest.

    :param quantities: List of the quantities in the new reservations to
     create.
    :type quantities: list[int]
    :param reservation_id: Resource id of the reservation to be split. Format
     of the resource id should be
     /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
    :type reservation_id: str
    """

    _attribute_map = {
        'quantities': {'key': 'properties.quantities', 'type': '[int]'},
        'reservation_id': {'key': 'properties.reservationId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SplitRequest, self).__init__(**kwargs)
        self.quantities = kwargs.get('quantities', None)
        self.reservation_id = kwargs.get('reservation_id', None)


class SubRequest(Model):
    """The sub-request submitted with the quota request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar limit: Quota (resource limit).
    :vartype limit: int
    :param name: The resource name.
    :type name: ~azure.mgmt.reservations.models.ResourceName
    :ivar resource_type: Resource type for which the quota check was made.
    :vartype resource_type: str
    :param unit:  The limit units, such as **count** and **bytes**. Use the
     unit field provided in the response of the GET quota operation.
    :type unit: str
    :param provisioning_state: The quota request status.
    :type provisioning_state: object
    :ivar message: User-friendly status message.
    :vartype message: str
    :ivar sub_request_id: Sub request ID for individual request.
    :vartype sub_request_id: str
    """

    _validation = {
        'limit': {'readonly': True},
        'resource_type': {'readonly': True},
        'message': {'readonly': True},
        'sub_request_id': {'readonly': True},
    }

    _attribute_map = {
        'limit': {'key': 'limit', 'type': 'int'},
        'name': {'key': 'name', 'type': 'ResourceName'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'object'},
        'message': {'key': 'message', 'type': 'str'},
        'sub_request_id': {'key': 'subRequestId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubRequest, self).__init__(**kwargs)
        self.limit = None
        self.name = kwargs.get('name', None)
        self.resource_type = None
        self.unit = kwargs.get('unit', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.message = None
        self.sub_request_id = None
