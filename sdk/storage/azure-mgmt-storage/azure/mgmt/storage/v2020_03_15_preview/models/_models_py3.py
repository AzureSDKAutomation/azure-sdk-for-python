# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Acl(Model):
    """Access Control List (ACL) for an iSCSI target portal group.

    All required parameters must be populated in order to send to Azure.

    :param initiator_iqn: Required. iSCSI initiator IQN (iSCSI Qualified
     Name); example: "iqn.2005-03.org.iscsi:client".
    :type initiator_iqn: str
    :param mapped_luns: Required. List of LUN names mapped to the ACL.
    :type mapped_luns: list[str]
    :param username: Required. Username for Challenge Handshake Authentication
     Protocol (CHAP) authentication.
    :type username: str
    :param password: Required. Password for Challenge Handshake Authentication
     Protocol (CHAP) authentication.
    :type password: str
    """

    _validation = {
        'initiator_iqn': {'required': True},
        'mapped_luns': {'required': True},
        'username': {'required': True, 'max_length': 511, 'min_length': 7},
        'password': {'required': True, 'max_length': 255, 'min_length': 12, 'pattern': r'^[-\w_0-9A-Za-z]*$'},
    }

    _attribute_map = {
        'initiator_iqn': {'key': 'initiatorIqn', 'type': 'str'},
        'mapped_luns': {'key': 'mappedLuns', 'type': '[str]'},
        'username': {'key': 'credentials.username', 'type': 'str'},
        'password': {'key': 'credentials.password', 'type': 'str'},
    }

    def __init__(self, *, initiator_iqn: str, mapped_luns, username: str, password: str, **kwargs) -> None:
        super(Acl, self).__init__(**kwargs)
        self.initiator_iqn = initiator_iqn
        self.mapped_luns = mapped_luns
        self.username = username
        self.password = password


class Attributes(Model):
    """Attributes of a iSCSI target portal group.

    All required parameters must be populated in order to send to Azure.

    :param authentication: Required. Indicates whether or not authentication
     is enabled on the ACL.
    :type authentication: bool
    :param prod_mode_write_protect: Required. Indicates whether or not write
     protect is enabled on the LUNs.
    :type prod_mode_write_protect: bool
    """

    _validation = {
        'authentication': {'required': True},
        'prod_mode_write_protect': {'required': True},
    }

    _attribute_map = {
        'authentication': {'key': 'authentication', 'type': 'bool'},
        'prod_mode_write_protect': {'key': 'prodModeWriteProtect', 'type': 'bool'},
    }

    def __init__(self, *, authentication: bool, prod_mode_write_protect: bool, **kwargs) -> None:
        super(Attributes, self).__init__(**kwargs)
        self.authentication = authentication
        self.prod_mode_write_protect = prod_mode_write_protect


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Disk(Model):
    """Azure Managed Disk to attach to the Disk pool.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique Azure Resource ID of the Managed Disk.
    :type id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, id: str, **kwargs) -> None:
        super(Disk, self).__init__(**kwargs)
        self.id = id


class Resource(Model):
    """ARM resource model definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, *, location: str, tags=None, **kwargs) -> None:
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class DiskPool(TrackedResource):
    """Response for Disk pool request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param provisioning_state: Required. State of the operation on the
     resource. Possible values include: 'Invalid', 'Succeeded', 'Failed',
     'Canceled', 'Pending', 'Creating', 'Updating', 'Deleting'
    :type provisioning_state: str or
     ~microsoft.storagepool.models.ProvisioningStates
    :param availability_zones: Required. Logical zone for Disk pool resource;
     example: ["1"].
    :type availability_zones: list[str]
    :param status: Required. Operational status of the Disk pool. Possible
     values include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy', 'Updating',
     'Running', 'Stopped', 'Stopped (deallocated)'
    :type status: str or ~microsoft.storagepool.models.OperationalStatus
    :param disks: List of Azure Managed Disks to attach to a Disk pool. Can
     attach 8 disks at most.
    :type disks: list[~microsoft.storagepool.models.Disk]
    :param subnet_id: Required. Azure Resource ID of a Subnet for the Disk
     pool.
    :type subnet_id: str
    :param additional_capabilities: List of additional capabilities for Disk
     pool.
    :type additional_capabilities: list[str]
    :param tier: Required. Determines the SKU of VM deployed for Disk pool.
     Possible values include: 'Basic', 'Standard', 'Premium'
    :type tier: str or ~microsoft.storagepool.models.DiskPoolTier
    :ivar system_data: Resource metadata required by ARM RPC
    :vartype system_data: ~microsoft.storagepool.models.SystemMetadata
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'required': True},
        'availability_zones': {'required': True},
        'status': {'required': True},
        'subnet_id': {'required': True},
        'tier': {'required': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'availability_zones': {'key': 'properties.availabilityZones', 'type': '[str]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'disks': {'key': 'properties.disks', 'type': '[Disk]'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'additional_capabilities': {'key': 'properties.additionalCapabilities', 'type': '[str]'},
        'tier': {'key': 'properties.tier', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemMetadata'},
    }

    def __init__(self, *, location: str, provisioning_state, availability_zones, status, subnet_id: str, tier, tags=None, disks=None, additional_capabilities=None, **kwargs) -> None:
        super(DiskPool, self).__init__(tags=tags, location=location, **kwargs)
        self.provisioning_state = provisioning_state
        self.availability_zones = availability_zones
        self.status = status
        self.disks = disks
        self.subnet_id = subnet_id
        self.additional_capabilities = additional_capabilities
        self.tier = tier
        self.system_data = None


class DiskPoolCreate(Model):
    """Request payload for create or update Disk pool request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param availability_zones: Required. Logical zone for Disk pool resource;
     example: ["1"].
    :type availability_zones: list[str]
    :param disks: List of Azure Managed Disks to attach to a Disk pool. Can
     attach 8 disks at most.
    :type disks: list[~microsoft.storagepool.models.Disk]
    :param subnet_id: Required. Azure Resource ID of a Subnet for the Disk
     pool.
    :type subnet_id: str
    :param additional_capabilities: List of additional capabilities for a Disk
     pool.
    :type additional_capabilities: list[str]
    :param tier: Required. Determines the SKU of VM deployed for Disk pool.
     Possible values include: 'Basic', 'Standard', 'Premium'
    :type tier: str or ~microsoft.storagepool.models.DiskPoolTier
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'availability_zones': {'required': True},
        'subnet_id': {'required': True},
        'tier': {'required': True},
        'location': {'required': True},
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'availability_zones': {'key': 'properties.availabilityZones', 'type': '[str]'},
        'disks': {'key': 'properties.disks', 'type': '[Disk]'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'additional_capabilities': {'key': 'properties.additionalCapabilities', 'type': '[str]'},
        'tier': {'key': 'properties.tier', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, availability_zones, subnet_id: str, tier, location: str, disks=None, additional_capabilities=None, tags=None, **kwargs) -> None:
        super(DiskPoolCreate, self).__init__(**kwargs)
        self.availability_zones = availability_zones
        self.disks = disks
        self.subnet_id = subnet_id
        self.additional_capabilities = additional_capabilities
        self.tier = tier
        self.tags = tags
        self.location = location
        self.id = None
        self.name = None
        self.type = None


class DiskPoolUpdate(Model):
    """Request payload for Update Disk pool request.

    :param disks: List of Azure Managed Disks to attach to a Disk pool. Can
     attach 8 disks at most.
    :type disks: list[~microsoft.storagepool.models.Disk]
    :param tags: Resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'disks': {'key': 'properties.disks', 'type': '[Disk]'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, disks=None, tags=None, **kwargs) -> None:
        super(DiskPoolUpdate, self).__init__(**kwargs)
        self.disks = disks
        self.tags = tags


class Error(Model):
    """The resource management error response.

    :param error: RP error response.
    :type error: ~microsoft.storagepool.models.ErrorResponse
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponse'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(Error, self).__init__(**kwargs)
        self.error = error


class ErrorException(HttpOperationError):
    """Server responsed with exception of type: 'Error'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorException, self).__init__(deserialize, response, 'Error', *args)


class ErrorAdditionalInfo(Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorResponse(Model):
    """The resource management error response.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~microsoft.storagepool.models.ErrorResponse]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~microsoft.storagepool.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorResponse]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class IscsiLun(Model):
    """LUN to expose the Azure Managed Disk.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. User defined name for iSCSI LUN; example: "lun0"
    :type name: str
    :param managed_disk_azure_resource_id: Required. Azure Resource ID of the
     Managed Disk.
    :type managed_disk_azure_resource_id: str
    """

    _validation = {
        'name': {'required': True},
        'managed_disk_azure_resource_id': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'managed_disk_azure_resource_id': {'key': 'managedDiskAzureResourceId', 'type': 'str'},
    }

    def __init__(self, *, name: str, managed_disk_azure_resource_id: str, **kwargs) -> None:
        super(IscsiLun, self).__init__(**kwargs)
        self.name = name
        self.managed_disk_azure_resource_id = managed_disk_azure_resource_id


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have
    everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ProxyResource, self).__init__(**kwargs)


class IscsiTarget(ProxyResource):
    """Response for iSCSI target requests.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param provisioning_state: Required. State of the operation on the
     resource. Possible values include: 'Invalid', 'Succeeded', 'Failed',
     'Canceled', 'Pending', 'Creating', 'Updating', 'Deleting'
    :type provisioning_state: str or
     ~microsoft.storagepool.models.ProvisioningStates
    :param status: Required. Operational status of the iSCSI target. Possible
     values include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy', 'Updating',
     'Running', 'Stopped', 'Stopped (deallocated)'
    :type status: str or ~microsoft.storagepool.models.OperationalStatus
    :param tpgs: Required. List of iSCSI target portal groups. Can have 1
     portal group at most.
    :type tpgs: list[~microsoft.storagepool.models.TargetPortalGroup]
    :param target_iqn: Required. iSCSI target IQN (iSCSI Qualified Name);
     example: "iqn.2005-03.org.iscsi:server".
    :type target_iqn: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'required': True},
        'status': {'required': True},
        'tpgs': {'required': True},
        'target_iqn': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'tpgs': {'key': 'properties.tpgs', 'type': '[TargetPortalGroup]'},
        'target_iqn': {'key': 'properties.targetIqn', 'type': 'str'},
    }

    def __init__(self, *, provisioning_state, status, tpgs, target_iqn: str, **kwargs) -> None:
        super(IscsiTarget, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.tpgs = tpgs
        self.target_iqn = target_iqn


class IscsiTargetCreate(ProxyResource):
    """Payload for iSCSI target create or update requests.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tpgs: Required. List of iSCSI target portal groups. Can have 1
     portal group at most.
    :type tpgs: list[~microsoft.storagepool.models.TargetPortalGroupCreate]
    :param target_iqn: iSCSI target IQN (iSCSI Qualified Name); example:
     "iqn.2005-03.org.iscsi:server".
    :type target_iqn: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tpgs': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tpgs': {'key': 'properties.tpgs', 'type': '[TargetPortalGroupCreate]'},
        'target_iqn': {'key': 'properties.targetIqn', 'type': 'str'},
    }

    def __init__(self, *, tpgs, target_iqn: str=None, **kwargs) -> None:
        super(IscsiTargetCreate, self).__init__(**kwargs)
        self.tpgs = tpgs
        self.target_iqn = target_iqn


class IscsiTargetUpdate(Model):
    """Payload for iSCSI target update request.

    All required parameters must be populated in order to send to Azure.

    :param tpgs: Required. List of iSCSI target portal groups. Can have 1
     portal group at most.
    :type tpgs: list[~microsoft.storagepool.models.TargetPortalGroupUpdate]
    """

    _validation = {
        'tpgs': {'required': True},
    }

    _attribute_map = {
        'tpgs': {'key': 'properties.tpgs', 'type': '[TargetPortalGroupUpdate]'},
    }

    def __init__(self, *, tpgs, **kwargs) -> None:
        super(IscsiTargetUpdate, self).__init__(**kwargs)
        self.tpgs = tpgs


class StoragePoolOperationDisplay(Model):
    """Metadata about an operation.

    All required parameters must be populated in order to send to Azure.

    :param provider: Required. Localized friendly form of the resource
     provider name.
    :type provider: str
    :param resource: Required. Localized friendly form of the resource type
     related to this action/operation.
    :type resource: str
    :param operation: Required. Localized friendly name for the operation, as
     it should be shown to the user.
    :type operation: str
    :param description: Required. Localized friendly description for the
     operation, as it should be shown to the user.
    :type description: str
    """

    _validation = {
        'provider': {'required': True},
        'resource': {'required': True},
        'operation': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str, resource: str, operation: str, description: str, **kwargs) -> None:
        super(StoragePoolOperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class StoragePoolRPOperation(Model):
    """Description of a StoragePool RP Operation.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the operation being performed on this
     particular object
    :type name: str
    :param is_data_action: Required. Indicates whether the operation applies
     to data-plane.
    :type is_data_action: bool
    :param action_type: Indicates the action type.
    :type action_type: str
    :param display: Required. Additional metadata about RP operation.
    :type display: ~microsoft.storagepool.models.StoragePoolOperationDisplay
    :param origin: The intended executor of the operation; governs the display
     of the operation in the RBAC UX and the audit logs UX.
    :type origin: str
    """

    _validation = {
        'name': {'required': True},
        'is_data_action': {'required': True},
        'display': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'action_type': {'key': 'actionType', 'type': 'str'},
        'display': {'key': 'display', 'type': 'StoragePoolOperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, *, name: str, is_data_action: bool, display, action_type: str=None, origin: str=None, **kwargs) -> None:
        super(StoragePoolRPOperation, self).__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.action_type = action_type
        self.display = display
        self.origin = origin


class SystemMetadata(Model):
    """Resource metadata required by ARM RPC.

    :param created_by: A string identifier for the identity that created the
     resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource:
     user, application, managedIdentity.
    :type created_by_type: str
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: str
    :param last_modified_by: A string identifier for the identity that last
     modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the
     resource: user, application, managedIdentity.
    :type last_modified_by_type: str
    :param last_modified_at: The timestamp of resource last modification
     (UTC).
    :type last_modified_at: str
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'str'},
    }

    def __init__(self, *, created_by: str=None, created_by_type: str=None, created_at: str=None, last_modified_by: str=None, last_modified_by_type: str=None, last_modified_at: str=None, **kwargs) -> None:
        super(SystemMetadata, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TargetPortalGroup(Model):
    """Response properties for iSCSI target portal group.

    All required parameters must be populated in order to send to Azure.

    :param luns: Required. List of LUNs to be exposed through iSCSI target
     portal group.
    :type luns: list[~microsoft.storagepool.models.IscsiLun]
    :param acls: Required. Access Control List (ACL) for an iSCSI target
     portal group.
    :type acls: list[~microsoft.storagepool.models.Acl]
    :param attributes: Required. Attributes of an iSCSI target portal group.
    :type attributes: ~microsoft.storagepool.models.Attributes
    :param endpoints: Required. List of private IPv4 addresses to connect to
     the iSCSI target.
    :type endpoints: list[str]
    :param tag: Required. The tag associated with the iSCSI target portal
     group.
    :type tag: int
    :param port: Required. The port used by iSCSI target portal group.
    :type port: int
    """

    _validation = {
        'luns': {'required': True},
        'acls': {'required': True},
        'attributes': {'required': True},
        'endpoints': {'required': True},
        'tag': {'required': True},
        'port': {'required': True},
    }

    _attribute_map = {
        'luns': {'key': 'luns', 'type': '[IscsiLun]'},
        'acls': {'key': 'acls', 'type': '[Acl]'},
        'attributes': {'key': 'attributes', 'type': 'Attributes'},
        'endpoints': {'key': 'endpoints', 'type': '[str]'},
        'tag': {'key': 'tag', 'type': 'int'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(self, *, luns, acls, attributes, endpoints, tag: int, port: int, **kwargs) -> None:
        super(TargetPortalGroup, self).__init__(**kwargs)
        self.luns = luns
        self.acls = acls
        self.attributes = attributes
        self.endpoints = endpoints
        self.tag = tag
        self.port = port


class TargetPortalGroupCreate(Model):
    """Target portal group properties for create or update iSCSI target request.

    All required parameters must be populated in order to send to Azure.

    :param luns: Required. List of LUNs to be exposed through the iSCSI target
     portal group.
    :type luns: list[~microsoft.storagepool.models.IscsiLun]
    :param acls: Required. Access Control List (ACL) for an iSCSI target
     portal group.
    :type acls: list[~microsoft.storagepool.models.Acl]
    :param attributes: Required. Attributes of an iSCSI target portal group.
    :type attributes: ~microsoft.storagepool.models.Attributes
    """

    _validation = {
        'luns': {'required': True},
        'acls': {'required': True},
        'attributes': {'required': True},
    }

    _attribute_map = {
        'luns': {'key': 'luns', 'type': '[IscsiLun]'},
        'acls': {'key': 'acls', 'type': '[Acl]'},
        'attributes': {'key': 'attributes', 'type': 'Attributes'},
    }

    def __init__(self, *, luns, acls, attributes, **kwargs) -> None:
        super(TargetPortalGroupCreate, self).__init__(**kwargs)
        self.luns = luns
        self.acls = acls
        self.attributes = attributes


class TargetPortalGroupUpdate(Model):
    """Target portal group properties for update iSCSI target request.

    :param luns: List of LUNs to be exposed through the iSCSI target portal
     group.
    :type luns: list[~microsoft.storagepool.models.IscsiLun]
    :param acls: Access Control List (ACL) for an iSCSI target portal group.
    :type acls: list[~microsoft.storagepool.models.Acl]
    """

    _attribute_map = {
        'luns': {'key': 'luns', 'type': '[IscsiLun]'},
        'acls': {'key': 'acls', 'type': '[Acl]'},
    }

    def __init__(self, *, luns=None, acls=None, **kwargs) -> None:
        super(TargetPortalGroupUpdate, self).__init__(**kwargs)
        self.luns = luns
        self.acls = acls
